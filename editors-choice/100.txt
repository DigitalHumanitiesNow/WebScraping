
						

by Dan Scott




This issue marks the 25th issue of the Code4Lib Journal since it launched in 2007. At that time, Jonathan Rochkind (co-ordinating editor of the first issue), wrote “We want the immediacy of a blog, the usefulness of a professional conference, the reliable quality of a good scholarly journal, and the participatory nature of our online communities, all in one easy to read and easy to produce package.”


We’re still running that experiment seven years later, with different co-ordinating editors each issue, and I’m delighted that this has been my opportunity to shepherd our community’s efforts… but all the credit goes to the authors for volunteering to take the time to share their findings with the community, and to the editors for helping refine those words and ideas for publication.


Reflections on an initial Code4Lib encounter

I hope you will indulge the following reflections on the Code4Lib Journal, its relationship to the Code4Lib community, and my own experiences at the intersection of information technology and libraries as we celebrate this 25th issue.

Code4Lib as support group

My own introduction to the Code4Lib community occurred in late 2006, the year I transitioned from a corporate software development environment to my current position as a systems librarian at Laurentian University. Facing a proprietary library system, highly restricted access to our servers, MARC, and the deadly combination of a limited budget and unlimited expectations, within a few months I was very seriously considering a quick exit from this career choice. Thankfully, two things happened:

My colleague Lise Doucette recommended the Access conference as an appropriate destination for a new systems librarian. I took her up on the suggestion and engaged in my
first Hackfest, which was organized by Dan Chudnov and Ross Singer, and attended by the likes of Patricia Williams, Art Rhyno, Bess Sadler, Terry Reese, Birkin Diana, and other ur-members of the Code4Lib community. This hackfest was immortalized in a One Big Library podcast episode.
Around the same time, Art pointed me at the #code4lib IRC channel, which I found filled with smart people commiserating (in a good-natured way) around the constraints of library standards and proprietary technology. Yet these people were infused with a belief in the importance of libraries, and determined to overcome those barriers to achieve a greater good. No, really!

Those two occurrences gave me hope for the future of libraries, and helped me stick with my career decision. Eight years later, when I’m frustrated or in a state of despair due to some hurdle or setback, the #code4lib channel still serves as a kind of support group: there are inevitably people there who “get it”. In her issue 5 editorial, Emily Lynema succinctly stated that the existence of the Code4Lib community offers the reassurance that “Librarians working with technology are not working alone.”


Code4Lib Journal articles also support that goal: they let information technologists in libraries know that no matter how geographically or institutionally isolated they might feel, there are others who understand and tackle similar challenges, and who are sharing their findings in the hopes that their peers may benefit and build upon their work. If you look closely, written between the lines of these articles you may find the words There is hope for libraries, if you persevere!

Code4Lib as inspiration

Over the span of a day at that Hackfest in 2006, my teammates Heather Matheson, Holly Eggleston, Scott Nickerson and I built a proof-of-concept collection analysis tool named CARTMan. It was an incredibly refreshing exercise in liberating yourself from institutional and technical constraints and just working with really smart people to get things done. And yes, of course we decided on the acronym first and then figured out how to make the name fit. That sassiness and creative flair was an important part of the Code4Lib community spirit as well: we don’t just get things done, we get things done with style and attitude.


Through the seven years that the Code4Lib Journal has been in existence, I suspect that many articles have inspired others to adopt new technologies and approaches that they would not otherwise have felt capable of mastering, or to further their own work. To share a personal example, issue 16 containing Jason Ronallo’s “HTML5 Microdata and Schema.org” article was published at the same time that my own baby steps with schema.org were incorporated into Evergreen. Jason’s article gave me a much broader insight into the possibilities for schema.org and provided some validation for my efforts (“No, I’m not entirely crazy pursuing this!”), and I have spent the bulk of my research time over the subsequent two years working in the domain.

Code4Lib as collaboration

Returning to my reminiscence about Access Hackfest 2006: many of the participants would not have self-identified as programmers; they had signed up the Hackfest because they could bring their skills and insight into metadata, or collection development, or public services requirements to the discussion and collaborate on building a project that was much richer for their participation. Somehow the organizers and promoters of that Hackfest were able to communicate that the event would be a safe space in which true collaboration and communication could occur, and teams like mine benefited from the wonderfully diverse perspectives and knowledge.


Previous editorials such as Kelley McGrath’s Editorial Introduction – A Cataloger’s Perspective on the Code4Lib Journal and Ron Peterson’s The Code4Lib Journal isn’t just for Coders have emphasized a similar point: the Code4Lib Journal, and the community in general, is a forum for communication by all those involved and interested in the future of libraries.

Overview of issue 25

This issue offers another broad set of articles that reflect the diversity of the Code4Lib community, from the “getting things done efficiently” approach of Kristina M. Spurgin’s “Getting What We Paid for: a Script to Verify Full Access to E-Resources“, to an introduction to cutting-edge containerization technology in John Fink’s “Docker: a Software as a Service, Operating System-Level Virtualization Framework“, to Terry Reese’s hands-on review of OCLC’s metadata and holdings APIs “Opening the Door: A First Look at the OCLC WorldCat Metadata API“.


Digitization efforts continue to impact our work. Kyle Rimkus and Kirk Hess share their experiences wrangling JPEG2000 images into compliance in “HathiTrust Ingest of Locally Managed Content: A Case Study from the University of Illinois at Urbana-Champaign“. Pieter De Praetere tells the story of how he overcame IT policy constraints to improve the efficiency of the scanning workflow at the provincial library of West-Vlaanderen in “Within Limits: mass-digitization from scratch“. And Matt Weaver reports on his The Community Cookbook project to digitize local cookbooks of historical value in “Ebooks without Vendors: Using Open Source Software to Create and Share Meaningful Ebook Collections“.


Data and GIS librarians also have something to look forward to in this issue, with some core GeoBlackLight design considerations highlighted in Darren Hardy and Kim Durante’s “A Metadata Schema for Geospatial Resource Discovery Use Cases“, and Frank Donnelly’s case study “Processing Government Data: ZIP Codes, Python, and OpenRefine” providing a hands-on tutorial in massaging datasets to produce added value for their users.


For the forensics-oriented librarians, archivists, and curators in the audience, we are delighted to offer Misra, Lee, and Woods’ “A Web Service for File-Level Access to Disk Images“. While our community is generally familiar with the MySQL relational database and the Solr full-text search engine, Arie Nugraha suggests it might be worth looking at some alternatives in “Indexing Bibliographic Database Content Using MariaDB and Sphinx Search Server“. Finally, Josh Rompf brings some practical recipes for wrangling media transcoding, concatenation, and scripting challenges in “Solving Advanced Encoding Problems with FFMPEG“.



					

I recently found myself paying the hosting bill for my domains and sites and feeling unhappy about the services despite the low cost. Finally I made the connection I should have made much sooner: I could have better servers for free (for a year). Amazon Web Services provides a Free Usage Tier that is more than sufficient for your average personal site, development servers, and many other needs. They eventually make you pay, but it's been well under $10 a month for me. YMMV. I remember at first being bewildered by the documentation and AWS ecosystem, so thought others might appreciate a quick walkthrough that explains how to procure these goodies for you own projects. So far, I've successfully set up Drupal, Mediathread, and several other software packages on free servers and have found the performance to be better than my shared hosts.Step 1Go to https://console.aws.amazon.com/console/homeStep 2Stare at the many services for a while:Step 3Click âEC2â and then âLaunch InstanceâStep 4Choose a machine image. I usually go with Ubuntu 12.04 for the long-term support, the easy package management (apt-get), and the strong user community. Note that only those with a star next to them are available for free.Step 5Select the t1.micro instance. Any other tiers you'll have to pay for.Step 6Give your server a name. Step 7Generate and download your SSH keypair file. You will login and manage your server via SSH. Rather than a password, you'll use a file to authenticate. If you're connecting from the terminal, here's the format for the command you will use, assuming you launched an Ubuntu instance:ssh -i <PATH>/<KEYPAIR> ubuntu@<SERVER_URL>Other machine images will have different login details. For example, a Windows server will provide you details to connect via Remote Desktop.Step 8Assuming you'll want to host a website on your server and be able to access it via SSH, you'll need to add a few firewall rules. These are available in a drop-down menu, so you don't even have to know which ports these services use. Assign the rules a group name; you can then re-use these settings for other machine images.Step 9Launch! That's it. You've set up your server and are ready to start it. After you click "Launch", you'll need to wait a little bit while it starts up. You'll be able to see the progress in your management console.Step 10Of course, it won't do you much good to have a server if you don't know how to find it. The information you need appears when you select your running instance in the management console (I've removed some information here for privacy):Step 11Configure your server. You're now ready to install the software you want to use. If, for example, you're setting up a Drupal site, you would now follow these instructions. Pre-Configured Machine ImagesIf you're not comfortable enough with Linux to set up your own server, you also have the option of using BitNami's pre-configured machine images for a wide range of open source products. The offer Drupal, Wordpress, Django, Joomla, Plone, and many others. Some might incur a small fee, but many are also eligible for free hosting. Beyond the Free TierWhile it's simple to create a test bed environment, this only scratches the surface. For a more scalable and significantly better-performing Drupal installation, we can combine several AWSes to distribute the different components of web server, database, and storage. A micro EC2 running Ubuntu 12.04/12.10 (or whatever flavor you prefer) and serving Drupal 7 through Apache 2, a micro RDS running MySQL, and a MongoDB server running on either the original EC2 or another one, plus the Drupal modules Boost and Mongodb (http://drupal.org/project/mongodb) and you could have a very nice system that would respond quickly, handle higher loads, and probably never cost more than a few pennies a month.* You also get snapshots, backups, scalability (begin paying), and a great deal of flexibility.*This holds especially true if you pay the small up-front cost of a reserved instance.

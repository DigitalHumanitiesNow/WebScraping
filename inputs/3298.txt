   This is a translation to spanish of âFrom Paper Maps to the Web: A DIY Digital Maps Primerâ written by Daniela SchÃ¼tte, manager of the Memoria Chilena project of the Biblioteca Nacional de Chile.      NOTA: hay terminologÃ­a que debe mantenerse en inglÃ©s puesto que asÃ­ debe escribirse en el cÃ³digo.   Lire en FranÃ§ais  En noviembre del 2014, fui invitado a la 2a semana del libro digital organizado por la Biblioteca Nacional de Colombia. La idea era  presentar los proyectos que estamos desarrollando en el NYP Labs y tambiÃ©n, dictar un taller sobre herramientas para geolocalizaciÃ³n de mapas. Pienso que puede ser Ãºtil compartir los contenidos de ese taller, ya que integra diversas herramientas y procesos que permiten que la cartografÃ­a digital sea, hoy en dÃ­a, accesible para todos.   Se trata de un paso a paso que, utilizando herramientas de georeferenciaciÃ³n gratuitas, te enseÃ±arÃ¡ a hacer tu propio e increÃ­ble mapa georeferenciado.    RESUMIENDOâ¦  Esto es lo que haremos. Este tutorial asume que ya tienes un mapa digitalizado y que tienes claro quÃ© informaciÃ³n quieres incorporar. Usualmente, los pasos son:   Georeferenciar el mapa escaneado para poder generar la cuadrÃ­cula (âtilesetâ en inglÃ©s) del mapa;  Procesar los datos en GeoJSON para sobreponerlos al mapa escaneado;  Crear un mapa personalizado que servirÃ¡ de referencia como mapa de la actualidad;  Integrar todos los elementos en una pÃ¡gina web interactiva.     NOTA: Este tutorial asume que estÃ¡s usando Mozilla Firefox, Apple Safari o Google Chrome. Tendremos que jugar con la consola de desarrollo y no tengo instrucciones multinavegador.     Â¡Empecemos!  Esto es lo que queremos hacer. Un mapa de BogotÃ¡ de 1891 conservado en la Biblioteca Nacional de Colombia (el link requiere Flash Player) enriquecido con datos extraÃ­dos de un directorio de BogotÃ¡ de 1888.     1) Geo-localizando.  El primer paso, luego de digitalizar el mapa, es agregar la informaciÃ³n geogrÃ¡fica. Para esto, es necesario establecer la equivalencia entre pixeles y ubicaciÃ³n exacta que ellos representan. Esto se conoce con el nombre de geolocalizaciÃ³n. Este proceso distorsionarÃ¡ la imagen digitalizada:   Imagen original digitalizada (encogida, por supuesto)  â¦Al hacerla calzar con la proyecciÃ³n de Mercator que es la que se utiliza en la mayorÃ­a de los proyectos que utilizan mapas digitales como OpenStreetMap or Google Maps:   ProyecciÃ³n Mercator de la imagen original geolocalizada   El porcentaje de distorsiÃ³n dependerÃ¡ de la calidad de la muestra âel mapa digitalizadoâ, su estado de conservaciÃ³n y la proyecciÃ³n del mapa original. Es posible que te estÃ©s preguntando Â¿y cÃ³mo ocurrirÃ¡ esto? Existen softwares propietarios y open-source que permiten geolocalizar imÃ¡genes de un modo sencillo. Sin embargo, el objetivo de este tutorial es lograrlo sin que tengas que instalar ningÃºn programa que no sea tu navegador.   Para empezar, anda a: Map Warper. Esta es una herramienta web que te permite subir tu mapa digitalizado para luego, a travÃ©s de una sencilla interfaz, geolocalizarlo (o ârectificarloâ para hablar como cartÃ³grafos). En el lado izquierdo verÃ¡s el mapa digitalizado y en el lado derecho, la proyecciÃ³n Mercator.  AsÃ­ se ve la interfaz dividida para la rectificaciÃ³n en Map Warper   FÃ­jate en los marcadores de la imagen. Cada pin tiene un nÃºmero y el mismo marcador se ve en ambos lados de la imagen. Asimismo, cada uno de ellos te servirÃ¡ para darte cuenta que en el mapa digitalizado, el Norte estÃ¡ hacia el lado izquierdo, mientras que el Este estÃ¡ hacia arriba. Si bien, cuantos mÃ¡s marcadores agregues, mÃ¡s precisa serÃ¡ la referenciaciÃ³n; debes considerar que tambiÃ©n serÃ¡ mÃ¡s lento el procesamiento de la imagen final. No obstante, la imagen se genera sÃ³lo una vez, asÃ­ que yo no me preocuparÃ­a demasiado por eso. De lo que sÃ­ debes preocuparte es de cuÃ¡ntos marcadores estÃ¡s dispuesto a agregar. El mapa de este tutorial, por ejemplo, tiene 101.  Una consideraciÃ³n final en este proceso es estar seguros que, luego de la distorsiÃ³n producida por la geolocalizaciÃ³n de la imagen, tienes una imagen de alta calidad. El proceso de distorsionar la imagen original se llama resamplear 1. En  las opciones avanzadas de Map Warper puedes definir si quieres que el proceso sea rÃ¡pido pero de inferior calidad (seleccionando la opciÃ³n âNearest Neighbourâ) o un poco mÃ¡s lento, pero de mejor calidad (seleccionando âCubic Splineâ):   Selecciona âCubic Splineâ en el menÃº âResampling Method optionâ  Puedes ver el mapa final aquÃ­. TambiÃ©n puedes descargarlo en alta resoluciÃ³n en la pestaÃ±a âExportâ. Sin embargo, pienso que  el insumo principal  que se obtiene de Map Warper  es la  cuadrÃ­cula o baldosas (âtilesetâ en inglÃ©s), como prefieran llamarlas. Y que en el fondo, es la URL que se ve aquÃ­:   Puedes encontrar la URL del tileset en la pestaÃ±a âExportâ   Y el template es: http://mapwarper.net/maps/tile/4949/{z}/{x}/{y}.png  Para seguir trabajando necesitarÃ¡s esta URL asÃ­ que guÃ¡rdala en un lugar seguro, un bloc de notas por ejemplo, para ir dejando todos estos datos, que luego ocuparemos. Map Warper tiene un motor que utiliza la imagen geolocalizada para generar un tileset en el mapa que opera a distintos niveles del zoom. AsÃ­ que sÃ³lo se nuestra la parte en la que estÃ¡s trabajando 2. Esta es una baldosa o una parte del tileset de ejemplo:   Un mapa Web estÃ¡ hecho de millones de estas     2) ExtracciÃ³n de datos.  Ya tenemos el mapa. Ahora tenemos que pensar quÃ© informaciÃ³n queremos mostrar en Ã©l. Nuestro ejemplo utiliza este directorio de la ciudad de BogotÃ¡ de  1888, la capital de Colombia. Este documento tiene informaciÃ³n valiosa sobre: decenas de miles de personas, cada una de ellas con su nombre completo, ocupaciÃ³n y direcciÃ³n; docenas de ocupaciones diferentes (descritas en la pÃ¡gina 4) y avisos publicitarios (junto con la direcciÃ³n de locales comerciales y los nombres de sus dueÃ±os). Este directorio  constituye un interesante retrato de la vida colombiana en la segunda mitad del siglo XIX: abogados, fotÃ³grafos y contadores comparten pÃ¡ginas con talabarteros y herreros. Yo me fui por el camino aburrido y decidÃ­ buscar polÃ­ticos influyentes de la Ã©poca, como por ejemplo el presidente en ejercicio (pÃ¡gina 222, primero en la segunda columna). La lista tiene los nombres de siete personas: cuatro presidentes, un vicepresidente, un ministro, y un presidente en ejercicio 3. En ella se incluye:  nombre;  cargo (El cargo mÃ¡s alto en el poder ejecutivo colombiano);  perÃ­odo de ejercicio;  pÃ¡gina (en la que aparece en el directorio); ocupaciÃ³n (de acuerdo con la tipificaciÃ³n del directorio);  direcciÃ³n;  La URL de una fotografÃ­a de Wikimedia (en caso de existir una);  latitud, longitud (un marcador de posiciÃ³n del centro de BogotÃ¡ que modificaremos en esta etapa).  Descarga la lista en CSV.   Puedes crear tu propia lista con otros datos que te parezcan mÃ¡s interesantes o mÃ¡s Ãºtiles. SÃ³lo debes asegurarte de incluir una columna para indicar la âlatitudâ y la âlongitudâ  y guardarla en una lista de valores separados por comas.     GeoJSON.  Hasta acÃ¡, tus datos estÃ¡n almacenados en una lista de valores separados por comas, pero las herramientas para geolocalizaciÃ³n en la web, generalmente utilizan el estÃ¡ndar de datos GeoJSON. GeoJSON estÃ¡ basado en JSON que es una de las formas mÃ¡s populares de estructurar datos en la web. GeoJSON utiliza el concepto de âatributosâ para describir los datos geogrÃ¡ficos. Estos atributos pueden ser puntos (como en este caso) o formas geomÃ©tricas complejas como lÃ­neas sencillas, compuestas o polÃ­gonos. Cada atributo es descrito por su geometrÃ­a, en inglÃ©s geometry, (el punto, la lÃ­nea o el polÃ­gono en sÃ­ mismo) y por sus propiedades, en inglÃ©s properties, que en el fondo son todos los datos extra que quieras asociar a ellos (en este caso, el nombre de la persona, su direcciÃ³n, fotografÃ­a, etc.). Por ejemplo4:     Ahora tenemos que convertir la hoja de datos en un objeto GeoJSON y actualizar los valores de latitud y longitud, en inglÃ©s latitude y longitude, de los marcadores de posiciÃ³n. Para esto, utilizaremos el mismo mapa. Pero necesitaremos una herramienta que nos permita generar el archivo GeoJSON y manipularlo fÃ¡cilmente.  Lo que nos lleva a GeoJSON.io. Es âuna rÃ¡pida y sencilla herramienta para crear, visualizar y compartir mapasâ. GeoJSON.io tiene una elegante interfaz que nos permitirÃ¡ crear el archivo GeoJSON que necesitamos.   Carga la pÃ¡gina de GeoJSON.io en una nueva pestaÃ±a del navegador. Lo primero que verÃ¡s serÃ¡ un mapa por defecto en un zoom out completo. Entonces, tendremos que intervenir un poco.  Haz click con el botÃ³n derecho en algÃºn punto del mapa y selecciona Inspeccionar elemento (o Inspect element si tienes el navegador en inglÃ©s):   Click botÃ³n derecho â Inspeccionar elemento  Al hacer esto, tendrÃ¡s una visualizaciÃ³n avanzada para desarrolladores, esto significa que podrÃ¡s ver y modificar el cÃ³digo de la pÃ¡gina que estÃ¡s viendo (en este caso, la interfaz del mapa). GeoJSON.io incluye una interfaz para programaciÃ³n (API) que te permitirÃ¡ tambiÃ©n, controlar el despliegue del mapa. El nÃºcleo de este sitio es MapBoxJS, que estÃ¡ construido en Leaflet, una âlibrerÃ­a JavaScript de cÃ³digo abierto para el desarrollo de mapas interactivos compatibles con dispositivos mÃ³vilesâ. Menciono ambos asuntos porque, en la mayorÃ­a de los casos, lo que funciona en uno de ellos, funcionarÃ¡ tambiÃ©n en el otro. (Es importante que leas toda la documentaciÃ³n antes de tomar cualquier decisiÃ³n). De ahora en adelante, me referirÃ© a Leaflet en lugar de MapBoxJS.   En la pestaÃ±a âConsolaâ (o âConsoleâ en inglÃ©s) verÃ¡s algo de texto y, al final, un cursor en el que podrÃ¡s ejecutar el cÃ³digo JavaScript. TambiÃ©n te darÃ¡s cuenta que hay algunos comentarios del creador de GeoJSON.io. Escribe esto en el Ã¡rea que mencionÃ© y presiona ENTER (fÃ­jate en el GIF animado de mÃ¡s abajo):     Con esto, lograrÃ¡s que el mapa se centre y haga un âzoomâ en BogotÃ¡, Colombia, el Ã¡rea comprendida por el mapa de 1891. Ahora escribe esto:    y presiona ENTER. Al hacerlo, agregarÃ¡s el tileset que ya habÃ­amos creado. FÃ­jate que la lÃ­nea de cÃ³digo que acabamos de escribir incluye la URL que copiamos en el paso 1. El resultado, debiera verse mÃ¡s o menos asÃ­:   Una rÃ¡pida âintervenciÃ³nâ a GeoJSON.io   Ahora, puedes cerrar la ventana de consola (No la ventana del navegador).     NOTA: SerÃ¡ necesario que apliques este cÃ³digo cada vez que cargues GeoJSON.io ya que no guarda las modificaciones vÃ­a consola. Lo que sÃ­ puedes hacer es registrarte y asÃ­ guardar los datos que agregaste a tu mapa.      Agregando datos a GeoJSON.io.  Ahora usaremos la versiÃ³n modificada del mapa como base para geolocalizar correctamente la lista CSV de presidentes. Arrastra la lista CSV que descargaste sobre el mapa:   La magia de arrastrar y soltar en GeoJSON.io   Te darÃ¡s cuenta cÃ³mo los datos inmediatamente son convertidos a GeoJSON (panel derecho) y el mapa muestra los marcadores de cada presidente (panel izquierdo). AparecerÃ¡ un pequeÃ±o mensaje verde (arriba a la izquierda) que indica que siete atributos fueron importados.   Peroâ¦ Â¡El mapa de 1891 desapareciÃ³! No te asustes. Esto sÃ³lo significa que el mapa ha hecho un zoom âdemasiado cerca de la tierraâ y la URL del tileset no tiene imÃ¡genes a esa escala. Haz un zoom out y verÃ¡s que el mapa de 1891 aparece otra vez.     Moviendo lo marcadores.  Como podrÃ¡s darte cuenta, los marcadores de la lista CSV quedaron geolocalizados, uno encima de otro, en la misma ubicaciÃ³n, la Plaza de BolÃ­var en BogotÃ¡. AsÃ­ que tendremos que moverlos a su ubicaciÃ³n correcta. Si haces click sobre el marcador gris, verÃ¡s los datos adicionales del primero en la lista (el General Rafael Reyes). Su direcciÃ³n, en ese entonces, era 50, Calle 16 (el nÃºmero 50  de la Calle 16). Encontrar la direcciÃ³n en el mapa serÃ¡ relativamente sencillo ya que cada cuadra tiene la numeraciÃ³n de inicio y tÃ©rmino escrita en cada esquina. Si te fijas, la numeraciÃ³n de las âCarrerasâ (vÃ­as verticales) aumenta hacia el Norte con los nÃºmeros pares e impares de Este a Oeste, mientras que la numeraciÃ³n de las âCallesâ (vÃ­as horizontales) aumenta hacia el Oeste con los nÃºmeros pares e impares de Norte a Sur:     Como puede ser que no sepamos exactamente dÃ³nde estaba una direcciÃ³n, pondremos los marcadores en su ubicaciÃ³n estimada. Para hacerlo, es necesario que actives el modo de ediciÃ³n, haciendo click en el Ã­cono editar:    Los marcadores tendrÃ¡n ahora un borde rosado y los podrÃ¡s mover donde quieras. Una vez ubicados en su posiciÃ³n correcta, recuerda guardar, haciendo click sobre el botÃ³n âSaveâ:     Hay algunas direcciones mÃ¡s complejas que otras, pero como podrÃ¡s imaginarte, esta es una tarea bastante agradable, porque literalmente, te pierdes en las calles de BogotÃ¡ de 1891. Un aspecto interesante de este mapa es que los edificios de gobierno aparecen coloreados con los tonos de la bandera colombiana. Cuando encuentres la casa de Rafael NÃºÃ±ez Moledo, el entonces presidente en ejercicio, notarÃ¡s que su direcciÃ³n coincide con uno de esos edificios del color de la bandera colombiana; esa es la Casa de NariÃ±o.     Guardando el GeoJSON.  Ahora, tenemos que generar la versiÃ³n final del archivo GeoJSON para crear el mapa interactivo. Simplemente selecciona Save > GeoJSON en el menÃº de GeoJSON.io. Un archivo llamado map.geojson se descargarÃ¡ en tu computador. Si prefieres, puedes descargar el que hice yo.    3) Haciendo un mapa del 2014 personalizado (opcional).  En verdad, lo que queremos es poder comparar cÃ³mo ha cambiado BogotÃ¡ desde 1891 a nuestros dÃ­as. Entonces, lo que necesitamos es un âmapa baseâ, que bÃ¡sicamente, es lo que aparece en tu pantalla cuando cargas GeoJSON.io: un mapa (esperemos, exacto) âcolor vainillaâ de calles del mundo actual. Puedes usar la cuadrÃ­dula estÃ¡ndar de OpenStreetMap o tambiÃ©n, puedes usar un servicio como MapBox para generar un mapa completamente a tu gusto (MapBox usa datos OSM). MapBox ofrece bastantes alternativas: te deja cambiar los colores, elegir quÃ© se muestra (calles, edificios, parques, etc.) e incluso te permite usar imÃ¡genes satelitales.   No voy a describir cÃ³mo hacer tu propio mapa en MapBox. Mejor, puedes leerlo en su excelente tutorial. Una vez que estÃ©n listos, tienen que guardar el identificador del mapa que crearon, que es algo asÃ­ como usuario.k53dp4io. Puedes usar la pÃ¡gina de proyectos de MapBox  para ver todos sus mapas y copiar fÃ¡cilmente el ID al bloc de notas:        NOTA: Si no quieren explorar el proceso de personalizar su propio mapa, pueden usar el ID de alguno de los ejemplos de MapBox.      4) El montaje final.  Ya tenemos todas las piezas para ensamblar nuestro mapa interactivo. Para eso tenemos:  los datos del mapa en formato GeoJSON; el tileset del mapa de 1891; el tileset del mapa actual o el ID de MapBox del mapa de 2014. El prototipo del mapa interactivo lo armaremos en JSFiddle, una herramienta que permite crear y testear rÃ¡pidamente cÃ³digo HTML/JavaScript/CSS. Revisa este breve tutorial para que te familiarices con la interfaz.  JSFiddle tiene cuatro paneles principales:   CÃ³digo HTML (arriba a la izquierda);  CÃ³digo CSS (arriba a la derecha);  CÃ³digo JavaScript (abajo a la izquierda);  Resultado final (abajo a la derecha).  JSFiddle se encarga de ensamblar los componentes de los tres cÃ³digos en el resultado, cada vez que presionas âRunâ (arriba, barra azul).     HTML & CSS.  En este ejemplo, la parte de HTML y CSS son muy sencillas. SÃ³lo necesitamos un Ã¡rea rectangular en la pÃ¡gina, en la que ubicaremos el mapa y todos sus controles.   Primero, el elemento HTML en el que ubicaremos el mapa. Escribe o copia y pega esto en el panel HTML:    Con este cÃ³digo, creas un elemento div cuyo identificador es map y, como te podrÃ¡s imaginar, contendrÃ¡ al mapa. Ahora, necesitamos darle âestiloâ a este elemento (debe tener alto, ancho, altura y, si queremos, bordes y otros atributos). El estilo se controla con el cÃ³digo CSS.  Escribe o copia y pega lo siguiente en el panel CSS:     Al hacer esto, el elemento, cuyo identificador es map, tendrÃ¡ una altura y un ancho de 400 pixeles (el prefijo # significa âIDâ en CSS). Por supuesto que pueden hacer el rectÃ¡ngulo mÃ¡s grande (si tu monitor es lo suficientemente grande) o aplicarle algunos otros atributos entre las llaves { } (por ejemplo: background-color: #f00; para un fondo rojo, si quieres ver el elemento sin el mapa) pero en realidad, preferirÃ­a que lo mantuvieras lo mÃ¡s sencillo posible.   Si presionas âRunâ en este momento, no verÃ¡s mucho (a menos que hayas aÃ±adido algÃºn color de fondo o borde al elemento). En cualquier caso, ese es todo el HTML y CSS que necesitas por el momento.    Agregar el MapBoxJS.  Para visualizar el mapa y hacerlo interactivo necesitaremos de algunas piezas adicionales y un poco de JavaScript. MencionÃ© hace un rato Leaflet y MapBoxJS. Leaflet estÃ¡ incluido en MapBoxJS, asÃ­ que mÃ¡s tarde nos ocuparemos de Ã©l.   MapBoxJS se compone de dos archivos separados: uno JS y otro CSS. Ya tenemos una idea de quÃ© es lo que hace el CSS. El archivo JavaScript contiene toda la magia del mapeo interactivo. Estas son las URLs de los archivos en cuestiÃ³n (Esta no es la mÃ¡s reciente versiÃ³n de MapBoxJS pero no hay que preocuparse, funcionarÃ¡):   Archivo CSS:   http://api.tiles.mapbox.com/mapbox.js/v1.5.0/mapbox.css   Archivo JavaScript:   http://api.tiles.mapbox.com/mapbox.js/v1.5.0/mapbox.js   En la columna de la izquierda de JSFiddle busca la secciÃ³n âExternal Resourcesâ. Ahora, copia estas URLs y pÃ©galas en la caja JavaScript/CSS URI y luego presiona el botÃ³n +. VerÃ¡s que algo como esto aparece despuÃ©s de hacerlo:   Este es tu âfiddleâ una vez has agregado los dos archivos de MapBoxJS   Esto harÃ¡ que JSFiddle cargue los archivos la prÃ³xima vez que hagas clic en el botÃ³n âRunâ.     Â¡Hola mapa!  Â¡Ahora sÃ­ viene la parte que hemos estado esperando! Escribamos unas lÃ­neas de JavaScript para poder ver el mapa de 1891. Copia y pega esto en el panel de JavaScript:     â¦y presiona âRunâ. Esto es lo que deberÃ­as ver:   Â¡Tu primer mapa web!   Gracias a Leaflet, es asÃ­ de fÃ¡cil trabajar con mapas web.      NOTA: No voy a entrar en detalles respecto de los diferentes aspectos de las APIs de Leaflet o MapBoxJS. Cada uno tiene sus propios tutoriales y ejemplos.    Lo que sÃ­ voy a hacer es dar algunos snippets y explicar, en tÃ©rminos sencillos, para quÃ© sirven. La idea es que copies, pegues, hagas clic en âRunâ y que la magia ocurra5. Luego podrÃ¡s investigar, probar y resolver cÃ³mo hacer otras cosas por tu cuenta.    Trabajando con mÃºltiples tilesets.  HabrÃ¡s notado que el mapa es completamente blanco, a excepciÃ³n del mapa de 1891. Esto es bueno y ocurre porque el tileset sÃ³lo tiene el mapa rectificado y nada mÃ¡s. Necesitamos un tileset adicional, del 2014, para poder comparar (podemos usar el ID de un mapa de MapBox, en caso de que no hayas creado el tuyo en el paso 3 de mÃ¡s arriba). Reemplazaremos el cÃ³digo JS con uno nuevo que incluirÃ¡:  InformaciÃ³n de la fuente y/o atribuciÃ³n del mapa;  el tileset del 2014; una herramineta de control que nos permitirÃ¡ cambiar entre un tileset y otro. Este cÃ³digo debe reemplazar el anterior cÃ³digo JS:     Si miras con detenciÃ³n este cÃ³digo, te darÃ¡s cuenta que es bastante similar al que habÃ­amos usado antes. La diferencia principal estÃ¡ en los datos de atribuciÃ³n y en los tilesets de MapBox (que incorporamos con su respectivo ID del mapa). La herramienta de control, son sÃ³lo dos lÃ­neas: la primera, que crea la variable âmapa baseâ y que soporta los tilesets (puedes agregar cuantos sets quieras); y la segunda, que crea âel controlâ y lo incrusta en el mapa. Veamos el control en acciÃ³n:   FÃ­jate cÃ³mo cambia la atribuciÃ³n (al pie del mapa) al cambiar de un tileset a otro   Â¡Ya casi terminamos!   Ahora lo Ãºnico que falta es que podamos desplegar nuestros datos. Leaflet hace este proceso bastante sencillo porque es soporte nativo de GeoJSON. Bastan unas pocas lÃ­neas de cÃ³digoâ¦ pero primero debes borrar la linea que hace zoom map.setView([4.598056, -74.075833],14). Ahora pega este cÃ³digo en la parte de abajo del panel JS:     Debes copiar el cÃ³digo GeoJSON del archivo de texto que descargaste de GeoJSON.io y pegarlo en donde dice 'pegar_geojson_aca_mantener_comillas'. AsegÃºrate de conservar las comillas sencillas:  ''. Hecho el cambio, esa lÃ­nea debiera verse como esta (por brevedad reemplacÃ© el contenido de las âfeaturesâ con un â¦):    Ahora, reemplacemos la funciÃ³n del zoom con map.fitBounds(geolayer.getBounds()). Esto hace al mapa âmÃ¡s inteligenteâ: en lugar de especificar de forma manual la longitud, latitud y el nivel del zoom, dejamos que Leaflet calcule el Ã¡rea que ocupa el set de marcadores con getBounds() y entregue ese valor al mapa mediante la funciÃ³n fitBounds(). VoilÃ¡, el zoom del mapa muestra ahora todos los marcadores. Si quieres agregar algunos mÃ¡sâ¦ Â¡el Ã¡rea cambiarÃ¡ automÃ¡ticamente!  TambiÃ©n puedes agregar puntos u otra informaciÃ³n adicional sobrepuesta en el control de capas. SÃ³lo tienes que crear una variable similar a la que creamos anteriormente y actualizar el cÃ³digo de creaciÃ³n, por ejemplo:    Cuando presiones âRunâ deberÃ¡s ver algo asÃ­:   El mapa con datos      NOTA: AsegÃºrate de mover el cÃ³digo de creaciÃ³n del control L.control.layers por debajo de donde estÃ¡ el GeoJSON. La variable geolayer necesita existir para poder ser aÃ±adida a as otras capas. Puedes guiarte por mi resultado en JSFiddle si necesitas mÃ¡s detalles.    Otra lÃ­nea importante es la de la funciÃ³n L.geoJson() que es la encargada de regular el comportamiento de todos los atributos descritos por map.geojson. Leaflet/MapBoxJS tiene por defecto Ã­conos azules para los marcadores, pero pueden ser modificados si quisieran. L.geoJson() tambiÃ©n permite agregar interacciÃ³n a los marcadores. Si ahora hacemos click con el botÃ³n derecho, no pasa nada.     Marcadores que cobran vida.  Me gustarÃ­a que, al hacer clic sobre un marcador, apareciera una ventana o âpopupâ con la informaciÃ³n que asociamos a cada uno de ellos (en las properties de cada punto). Para lograrlo, tenemos que hacer dos cosas:  Crear una funciÃ³n que construya y despliegue el popup para cada punto (marcador). Modificar el llamado L.geoJson() para que utilice esta funciÃ³n. Leaflet tiene la funciÃ³n bindPopup(), que hace precisamente eso: dibuja una caja con un texto para un determinado layer (el tÃ©rmino en inglÃ©s para los elementos que se dibujan en el mapa). Este texto puede incluir HTML. Copia y pega este cÃ³digo, debajo de todo lo que llevas hasta el momento:    Esta funciÃ³n showPopup() recibe un feature, la pieza de GeoJSON que contiene toda la informaciÃ³n (geometrÃ­a y propiedades), y un layer (en nuestro caso, el marcador azul). Estos dos parÃ¡metros son procesados automÃ¡ticamente por la funciÃ³n L.geoJson(). showPopup() extrae las propiedades de cada atributo (nombre, direcciÃ³n, etc.) y las articula en una cadena HTML que luego es usada para crear el popup.   Pero para que funcione, tenemos que conectar la funciÃ³n showPopup a algo. Para hacerlo, debemos modificar la actual lÃ­nea de L.geoJson de la siguiente forma:     â¦solamente estamos agregando , {onEachFeature: showPopup} despuÃ©s de geodata. Lo que hicimos fue decirle a Leaflet que aplique la funciÃ³n showPopup a cada atributo en GeoJSON.      NOTA: Si nuestro GeoJSON tiene multiples tipos de atributos (por ejemplo: puntos, lÃ­neas o polÃ­gonos) es importante tener en mente que la misma funciÃ³n serÃ¡ aplicada a cada uno de ellos. Por ejemplo, los polÃ­gonos tienen un Ã¡rea, pero los puntos no; entonces serÃ¡ necesario que revisemos si el atributo sobre el que clickeamos tiene Ã¡rea antes de intentar usar la funciÃ³n fitBounds en el mapa.    Al cargar el mapa y hacer clic sobre un marcador, debiera verse asÃ­:    Se ve bastante bien y todo, peroâ¦ Â¿no serÃ­a mejor ver la foto y quizÃ¡s linkear a la pÃ¡gina que corresponde del directorio?   Â¡Hagamos eso!   Remplacemos la funciÃ³n showPopup con esta:     Lo que acabamos de hacer fue agregar una cosa mÃ¡s para el popup: Si key es igual a âPageâ linkeamos al directorio y si key es igual a âPhotoâ construimos un contenedor para la imagen que la despliega a 150 pixels de alto (sÃ³lo en caso de que sea demasiado grande).   AsÃ­ es como se veÃ­a el Sr. NÃºÃ±ez:     â¦digno de un presidente!   Y, ahora sÃ­, casi terminamos.     Empaquetando.  Lo Ãºltimo serÃ­a compilar estos tres snippets de cÃ³digo en una pÃ¡gina HTML para que puedas publicar tu nuevo mapa en alguna parte. No te preocupes, para esto hay otra plantilla que tiene marcados los sitios en los que debes pegar el CSS, HTML y JS.  Guarda todo el cÃ³digo como un archivo .html y publÃ­calo donde quieras:     Puedes ver el mapa terminado aquÃ­. SÃ³lo hice algunas modificaciones mÃ­nimas al CSS para que se viera mejor en la ventana del navegador.  OjalÃ¡ este tutorial sea Ãºtil. CuÃ©ntame si tienes algÃºn comentario o sugerencia.  Similar a lo que ocurre con la mÃºsica cuando se convierte de calidad CD a MP3.  â©Esta explicaciÃ³n puede ser Ãºtil para una introducciÃ³n mÃ¡s profunda sobre cÃ³mo funcionan los tilesets en los mapas web.  â©No hice una investigaciÃ³n acuciosa de los nombres, asÃ­ que puede ser (aunque es improbable) que existan homÃ³nimos.  â©De GeoJSON.org â©Â¡Todo debiera funcionar asÃ­! â©

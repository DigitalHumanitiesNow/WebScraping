A previous post I made reviewing the Ithaka report âStreamlining access to Scholarly ResourcesâÂ got a lot of attention. Thanks! The primaryÂ issue Iâm interested in there: Getting our patrons from a paywalled scholarly citation on the open unauthenticated web, to an authenticated library-licensed copy, or other library services. âBridging the gapâ. Here, we use Umlaut to turn our âlink resolverâ into a full-service landing page offering library services for both books and articles: Â Licensed online copies, local print copies, and other library services. This means weâve got the âreceivingâ end taken care of â hereâs a book and an article example of an Umlaut landing page â the problem reduces to getting the user from the open unauthenticated web to an Umlaut page for the citation in question. Which is still a tricky problem. Â In this post, brief discussion of two things: 1) The new âGoogle Scholar Buttonâ browser extension from Google, which is interesting in this area, but I think ultimately not enough of a solution to keep me from looking for more, and 2) Possibilities of Zotero open source code toward our end. The Google Scholar Button In late April Google released a browser plugin for ChromeÂ and FirefoxÂ called the âGoogle Scholar Buttonâ. This plugin will extract the title of an article from a page (either text youâve selected on the page first, or it will try to scrape a title from HTML markup), and give you search results for that article title from Google Scholar, in a little popup window. Interestingly, this is essentially the same thing a couple of third party software packagesÂ haveÂ done for a while: TheÂ LibX âMagic Buttonâ, and Lazy Scholar. Â But now we get it in an official Google release, instead of hacky workarounds to Googleâs lack of API from open source. The Google Scholar Button is basically trying to bridge theÂ same gap we are; it provides a condensed version of google scholar search results, with a link to an open access PDF if Google knows about one (I am still curious how many of these open access PDFâs are not-entirely-licensed copies put up by authors or professors without publisher permissions); And it in some cases provides an OpenURL link to a library link resolver, which is just what weâre looking for. However, itâs got some limitations that keep me from considering it a satisfactory âBridging the Gapâ solution: In order to get the OpenURL link to your local library link resolver while you are off campus, you have to set your Google Scholar preferences in your browser, which is pretty confusing to do. The title has to match in Google Scholarâs index of course. WhichÂ is definitelyÂ extensive enough to still be hugely useful, as evidenced by the open source predecessors to Google Scholar Button trying to do the same thing. ButÂ most problematically at all, Google Scholar Button results will only show the local library link resolver link forÂ some citations: The ones that have been registered as having institutional fulltext access in your institutional holdings registered with Google. Â I want to get users to the Umlaut landing page forÂ any citation they want, even if we donât have licensed fulltext (and we might even if Google doesnât think we do, the holdings registrations are not always entirely accurate), I want to show them local physical copies (especially for books), and ILL and other document delivery services. The full Google Scholar gives a hard-to-find but at least itâs there OpenURL link for âno local fulltextâ under a âmoreâ link, but the Google Scholar Button version doesnât offer even this. Books/monographs might not be the primary use case, but I really want a solution that works for books too â and books are something users may be especially interested in a physical copy instead of online fulltext for, and books are also something that our holdings registration with Google pretty much doesnât include, even ebooks. Â And book titles areÂ a lot less likely to return hits in Google Scholar at all.  I really want a solution that works all or almost all of the time to get the patron to our library landing page, not just some of the time, and my experiments with Google Scholar Button revealed more of a âsometimesâ experience. Iâm not sure if the LibX or Lazy Scholar solutions can provide an OpenURL link in all cases, regardless of Google institutional holdings registration. Â They are both worth further inquiry for sure. Â But Lazy Scholar isnât open source and I find itâs UI not great for our purposes. And I find LibX a bit too heavy weight for solving this problem, and have some other concerns about it. So letâs consider another avenue for âBridging the Gapââ¦. Zoteroâs scraping logic Instead of trying to take a title and find a hit in a mega-corpus of scholarly citationsÂ Â like the Google Scholar Button approach, another approach would be to try to extract the full citation details from the source page, and construct an OpenURL to send straight to our landing page. And, hey, it has occurred to me, thereâs some software that alreadyÂ can scrape citation data elements from quite a long list of web sites our patrons might want to start from. Â Zotero. (And Mendeley too for that matter). In fact, you could use Zotero as a method of âBridging the Gapâ right now. Sign up for a Zotero account, install the Zotero extension. When you are on a paywalled citation page on the unauthenticated open web (or a search results page on Google Scholar, Amazon, or other places Zotero can scrape from), first import your citation into Zotero. Then go into your Zotero library, find the citation, and â if youâve properly set up your OpenURL preferences in Zotero â itâll give you a link to click on that will take you to your institutional OpenURL resolver. In our case, our Umlaut landing page. We know from some faculty interviews that some faculty definitely use Zotero, hard to say if a majority do or not. I do not knowÂ how many have managed to set up their OpenURL preferences in Zotero, if this is part of their use of it. Even of those who have, I wonder how many have figured out on their own that they can use Zotero to âbridge the gapâ in this way. Â But even if we undertook an education campaign, it is a somewhat cumbersome process. You might not want to actually import into your Zotero library, you might want to take a look at the article first. And not everyone chooses to use Zotero, and we donât want to require them to for a âbriding the gapâ solution. But that logic is there in Zotero, the pretty tricky task of compiling and maintaining âscrapingâ rules for a huge list of sites likely to be desirable as âBridging the Gapâ sources. And Zotero is open source, hmm. We could imagine adding a feature to Zotero that let the user choose to go right to an institutional OpenURL link after scraping, instead of having to importÂ and navigate to their Zotero library first. Â But Iâm not sure such a feature wouldÂ match the goals of the Zotero project, or how to integrate it into the UX in a clear way without disturbing from Zoteroâs core functionality. But again, itâs open source. Â We could imagine âforkingâ Zotero, or extracting just the parts of Zotero that matter for our goal, into our own product that did exactly what we wanted. Iâm not sure I have the local resources to maintain a âforkedâ version of plugins for several browsers. But Zotero also offers a bookmarklet. Â Which doesnât have as good a UI as the browser plugins, and which doesnât supportÂ all of the scrapers. But which unlike a browser plugin you can install on iOS and Android mobile browsers (although itâs a bit confusing to do so, at least itâs possible). Â And which itâs probably âless expensiveâ for a developer to maintain a âforkâ of â we really just want to take Zoteroâs scraping behavior, implemented via bookmarklet, and completely replace what youÂ do with it after itâs scraped. Send it to our institutional OpenURL resolver. I am very intrigued by this possibility, it seems at least worth some investigatory prototypes to have patrons test. Â But I havenât yet figured out how where to actually find the bookmarklet code, and related code in Zotero that may be triggered by it, let alone the next step of figuring out if it can be extracted into a âforkâ. Â Iâve tried looking around on the Zotero repo, but I canât figure out whatâs what. Â (IÂ think all of Zotero is open source?). Anyone know the Zotero devs, and want to see if they want to talk to me about it with any advice or suggestions? Or anyone familiar with the Zotero source code themselves and want to talk to me about it?Filed under: General   

If you've been using computers for a while, you've probably purchased  quite a few devices for storing your work.  My family's first computer  (a Timex Sinclair 1000 purchased for about $40 in 1984 from our  neighborhood grocery store) saved files to an ordinary audio cassette by  transferring data over the same sort of cord you might use to connect  your iPod to your car stereo.  Since then I've used floppy disks, zip disks,  CD-ROMS, DVD-ROMs, and memory sticks, and with each change I migrated  most of my important files to the new format.  Occasionally though, I,  like most computer users, need to access files left behind on obsolete  technology.   I've written before in various places about the problem  this poses for scholars and archivists working with the so-called "born  digital" collections in our Library, but many of the tools and  techniques I use as a digital curator, I  also use to access my own digital history.  I suspect over the next few  years there may be a couple unhappy souls desperately Googling for ways  of accessing data on their old floppy drives, and so I thought I would  submit some of my best practices to the corpus of online wisdom to help  those future search engine supplicants in whatever way I can. Connecting to old drives In  many ways, the hardest part about accessing old data is physically  connecting old disks to new technology.  The modern USB port has only  been really common since 1998, and there are a wide range of older  devices that never used the format.  Although it is possible to purchase  adapters to convert popular old connection types (such as serial,  parallel, and SCSI) to USB, finding the appropriate software "drivers"  to allow modern computers to run these devices once connected can be  very difficult.  Below are a few solutions I've found for some old  formats. https://commons.wikimedia.org/wiki/File:3.4_inch_floppy_disk.jpg1.44 Mb (High Density) Floppy Disks  Recommended solution:  Purchase readily available drive One  of the most common media formats of the 1990s was the High Density 3.5  inch floppy disk.  Fortunately, USB connected drives capable of reading  these disks are readily commercially available and relatively  inexpensive.  (About $20 at the moment) Â  Â  Â  Â https://commons.wikimedia.org/wiki/File:3.5%22_floppy_disk.jpg740K / 800K (Double Density) Floppy Disks Recommended solution:  Purchase older system with proper drive on Ebay Most  3.5 floppy disks manufactured in the 1980s had only about half the  capacity of the high density disks made in later years.  These older,  double density, disks were very similar in appearance to their high  density counterparts (usually only distinguishable by the lack of a hole  on the upper right hand corner of the disk); however, they depended on a  different kind of drive technology.  Drives made in the mid to late  1990s were often capable of reading both kinds of disks, but today's USB  floppy drives can generally only read high density disks.  To read  older formats you will probably need to find a used older machine with  the appropriate drive (the Mac Powerbook G3 laptop is my personal  favorite).  Sherlock Consulting, a small British company, has also  released a tool called OmniFlop  that will allow you to use high density drives to read low density  disks, but it will not generally work with USB drives and most internal  floppy drives require a special connection type not generally available  on desktops manufactured in recent years. https://upload.wikimedia.org/wikipedia/commons/e/ea/Disco_5.25.JPG 5.25 inch floppy disks Recommended solution:  FC5025 connector and eBay for drive (most uses) The  5.25 inch disks of the 1980s are iconic in the memories of those who  used Commodore 64s and Apple IIs.  Although solutions for connecting  these drives to newer computers emerged in the late 1990s, two recently  released tools make migrating data from old floppies much easier.  The  FC5025 from Device Side Data allows you to connect a 5.25 floppy drive  to a USB port and copy all of the data on the disk.  At about $55 +  shipping, it's probably the most affordable option.   However, for those with a little extra cash who are doing real  archival work, the UK-made KryoFlux (90 euros, ~$115) may be a slightly  better option.   The device is at least as easy to use as the FC5025 and is capable of  capturing a much more precise copy of the data on the disk.  The  precision can be important for archiving copy-protected disks or  programs that exploit very low-level features of 1980s drive technology,  but for most users it may not be worth paying almost twice the price of  a FC5025.  Moreover, for those who need a device for professional  rather than personal reasons (e.g. librarians and scholars), the company  has a different, unadvertised, pricing structure that may not be worth  the hassle of negotiating for those who do not require the incremental  improvements in accuracy.  For both of the above options, you will also  need to purchase a floppy drive on eBay (at present, the market rate  seems to be about $40). A note on Commodore, Apple, Atari, etc. "Flippy Disks" In  the early 1980s, most drives could only read one side of a disk at a  time.  You would actually need to physically "flip" the disk over and  reinsert it into the drive to read the data on the opposite side.   However, later drives, the kind you will usually find on eBay, were  capable of reading both sides of the disk at once.  These later drives  also use the small round window on the right side of the middle of the disk to  determine the position of the data on the disk.  When you flip the disk  over, the hole is on the opposite side and the drive can no longer  position itself.  There are several mechanical hacks (involving wire  cutting and soldering things to your drive) that allow modern drives to  read these "flippy" disks, but no really elegant solution has yet  emerged. Disk Imaging Once  you've found a way to connect the drive to your computer, you still  need a way to copy the files.  For older drives, copying a single file is sometimes much  more difficult than making a complete duplicate of all of the data on  your disk.  Most of the solutions proposed above simply set up a stream  in which the data (the 1s and 0s) flow from the disk into a new file on  your modern computer.  This new file is called a "disk image." Even  if you can access the files directly (for example, using a USB floppy  drive to access a high density disk), you may still want to create a  disk image.  A disk image preserves all data  on a disk, including hidden files and the remnants of deleted ones.   There are commercial programs that will create various forms of disk  images with varying levels of fidelity to the original source, but if  you're using a Mac or a Linux machine, you can use the built-in disk  imaging program "data description" or "dd."  If you are using a Windows  machine, you can use the same program in a Unix simulator called CygWin. To create a disk image on Mac or Linux: Open a  Terminal/Command Line window.     Type "mount" at the prompt.     Find your drive in the list. For instance, if your disk shows up as "Untitled 6" on the desktop, you want to look for a line that looks like:  dev/disk1 on /Volumes/Untitled (msdos, local, nodev, nosuid, read-only, noowners)  The first part of this line (/dev/disk1) specifies the path to the drive.  Remember this. The second part of (/Volumes/Untitled) specifies what Unix people call the "mount point" of the drive. Eject the disk In  order to completely copy the drive, you'll need to "eject" it.  You can  usually do this with the "Eject" option to "Safely remove the drive" on  the Mac.  However, for some kinds of removable media (like CD-ROMs)  this will also trigger the physical eject function on the drive and spit  the disk out of the machine. To be safe, you might want to issue the following commands in your terminal window:  sudo umount -f /Volumes/Untitled (Remember, we saw the disk was "mounted" at /Volumes/Untitled"). The  command  "sudo mount -f /Volumes/Untitled" issues the command to eject  the disks.  You'll be prompted for your administrator password.  If you  don't have one, you might try leaving off the "sudo" at the beginning  (typing "umount -f /Volumes/Untitled").  Putting sudo in front of a  command in the Terminal window runs the command as an administrator or  "Super User" ("Super User Do!---SUDO--get it?), but depending on how the  disk was loaded you might not need this level of access to eject it. Create the image You  are now ready to create the disk image.  It's best if you can write protect the original disk at this point. For a 3.5 inch disk this means flipping the switch in the upper left to open the hole.  On a 5.25 inch disk it means putting a small piece of opaque tape over the notch on the side of the disk. Remember that the path to the  drive above was /dev/disk1.  I will now use it again in the command  below. BE VERY CAREFUL not to reverse the "if" (input file) and "of" (output) file parameter below.  Doing so will cause you to overwrite the data on the original if you have not write-protected it.  dd if=/dev/disk1 of=~/Desktop/myimage.dmg  This  command will stream every bit of data from the input file (if=)   /dev/disk1 into an output file (of=) on the desktop which I have  arbitrarily called myimage.dmg.  It may look like nothing's happening  for awhile (Unix commands aren't known for being especially good at  letting you know what's happening), but eventually you should get a  notice about the success or failure of the copy.  If all went well, you  can now double click the myimage.dmg file on the Desktop and it will  launch as if it were a new disk (if you're using a Linux machine, you  may want to change the file extension to .img instead of .dmg). Using disk images For operating systems, you may need to use an emulator to open the disk  and view its files.  An emulator is a program capable of simulating an  older machine; they are often created by those who want to play old  computer games, but can be very useful for recovering old files as well.   In most cases, emulators use disk images rather than attempting to  connect to physical drives, so the image you created above will be  useful.  Googling for the name of your computer or operating system  along with the word "emulator" will likely turn up a few options for  most systems.  John A. Reder has a fairly good list of computer  emulators for various operating systems. Finding old software Often,  simply accessing old files isn't enough.  You will also need to find  the software that open them.  Sometimes it's possible to recover much of  the textual data in a file by opening it in a text editor like  TextWrangler (for Mac) or Notepad++ (for Windows), but for other kinds  of work (e.g. music, drawing, 3d designs), you'll need to find a copy of  the original software to run in your emulator.  Finding a legal copy of 10-20 year software can be tricky. In some cases, thoughtful rights holders  release very old versions of their software for free (as Apple has done  with many of the early versions of Mac OS), but in most cases the only  way to find these programs is by buying a used copy and producing a disk  image yourself or by assuming the legal risk of hunting for  "ROMs" (disk images named after the Read-Only Memory cartridges many  early game systems used) uploaded by others without clear authorization.  Unfortunately, there's not much I can  recommend here.  However, if you are the rights holder of an  out-of-print software title, especially those that were used to create  content, I encourage you to consider releasing your old software to the  public domain. Contact me at dougreside at nypl.org if  you're interested in finding out how.

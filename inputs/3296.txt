   This is a translation to french of âFrom paper maps to the Web : A DIY Digital Maps Primerâ by Claire Chemel, library curator and digital manager at the DÃ©partement des Cartes et plans of the BibliothÃ¨que nationale de France.   Leer versiÃ³n en espaÃ±ol  En novembre 2014, jâai Ã©tÃ© invitÃ© Ã  la 2e Semaine du livre numÃ©rique organisÃ©e par la BibliothÃ¨que nationale de Colombie. Jây ai prÃ©sentÃ© les projets dÃ©veloppÃ©s par le NYPL Labs, et animÃ© un atelier consacrÃ© aux outils actuels de cartographie numÃ©rique. Voici le contenu de cet atelier, qui vous expliquera comment crÃ©er vos propres cartes gÃ©o-rÃ©fÃ©rencÃ©es Ã  lâaide dâoutils Web gratuits.  En bref  Nous allons crÃ©er ceci. Ce tutoriel nÃ©cessite que vous disposiez dâune carte numÃ©risÃ©e et de donnÃ©es Ã  lui superposer. Les principales Ã©tapes dÃ©crites sont:  gÃ©o-rÃ©fÃ©rencer la carte numÃ©risÃ©e pour gÃ©nÃ©rer des tuiles, crÃ©er des donnÃ©es GeoJSON Ã  superposer Ã  la carte numÃ©risÃ©e, crÃ©er un fond de carte personnalisÃ© comme rÃ©fÃ©rence actuelle, assembler tous les Ã©lÃ©ments sur une page Web interactive.    Note: Ce tutoriel suppose que vous utilisiez Mozilla Firefox, Apple Safari ou Google Chrome. Nous allons utiliser la console dÃ©veloppeur, et je ne dispose pas dâinstructions pour tous les navigateurs.   Pour commencer  Voici ce que nous voulons obtenir. Il sâagit dâune carte de Bogota en 1891, conservÃ©e Ã  la BibliothÃ¨que nationale de Colombie (lien Flash Player), enrichie de donnÃ©es trouvÃ©es dans un annuaire de Bogota de 1888.    1) Geo-rÃ©fÃ©rencement  AprÃ¨s numÃ©risation de la carte, la premiÃ¨re Ã©tape est de lui ajouter des donnÃ©es gÃ©ographiques, dâÃ©tablir des correspondances entre les pixels de lâimage et les lieux quâils reprÃ©sentent : il sâagit du gÃ©o-rÃ©fÃ©rencement. Ce procÃ©dÃ© va dÃ©former lâimage numÃ©risÃ©e :   Le scan original (rÃ©duit, Ã©videmment)  â¦pour lâaligner sur la projection de Mercator qui est utilisÃ©e dans la plupart des projets de cartographie en ligne comme OpenStreetMap ou Google Maps:  Scan gÃ©o-rÃ©fÃ©rencÃ© alignÃ© sur la projection de Mercator  Le degrÃ© de dÃ©formation dÃ©pendra de la qualitÃ© du relevÃ©, de lâÃ©tat de conservation et de la projection originelle de la carte. Vous vous demandez sans doute comment cela fonctionne. Des logiciels commerciaux ou open-source permettent de gÃ©o-rÃ©fÃ©rencer des images, mais le principe de ce tutoriel est dâobtenir le mÃªme rÃ©sultat en utilisant uniquement votre navigateur Internet. Voici donc Map Warper! Map Warper est un outil en ligne qui permet de tÃ©lÃ©charger vos cartes numÃ©risÃ©es et fournit une interface simple pour les gÃ©o-rÃ©fÃ©rencer (ou les ârectifierâ). GÃ©o-rÃ©fÃ©rencer consiste Ã  faire correspondre une partie de la carte numÃ©risÃ©e (Ã  gauche) Ã  une partie du fond de carte Mercator (Ã  droite) :  Lâinterface de rectification en vis-Ã -vis de Map Warper  Vous remarquerez les repÃ¨res sur chaque image. Chaque repÃ¨re porte un numÃ©ro, et figure dans les deux vues. Ils permettent de savoir que le nord se trouve Ã  gauche sur lâimage numÃ©risÃ©e, et lâest vers le haut. Plus vous ajouterez de repÃ¨res, plus le gÃ©o-rÃ©fÃ©rencement sera prÃ©cis, mais plus lâimage finale prendra du temps Ã  gÃ©nÃ©rer. Toutefois, la gÃ©nÃ©ration dâimage est une opÃ©ration unique, donc ne vous inquiÃ©tez pas trop Ã  ce sujet. Il sâagit plus de savoir combien de repÃ¨res vous voulez ajouter. La carte utilisÃ©e dans ce tutoriel en a 101.  Dernier point, il faut Ãªtre sÃ»r dâobtenir une image gÃ©o-rÃ©fÃ©rencÃ©e de haute qualitÃ© aprÃ¨s quâelle ait Ã©tÃ© modifiÃ©e. Lâaction de dÃ©former lâimage de dÃ©part sâappelle le rÃ©echantillonage1 (âresamplingâ en anglais). Dans les options avancÃ©es de Map Warper, vous pouvez choisir entre deux mÃ©thodes, âNearest Neighbourâ (qualitÃ© basse mais rapide) ou âCubic Splineâ (qualitÃ© haute mais lente) :  Choisir âCubic Splineâ dans lâoption âResampling Methodâ  Vous pouvez voir le rÃ©sultat final ici.  Vous pouvez aussi tÃ©lÃ©charger cette carte en haute rÃ©solution dans lâonglet âExportâ.  Mais Ã  mon avis lâÃ©lÃ©ment le plus important Ã  obtenir de Map Warper, ce sont les tuiles.  Voici le modÃ¨le de leur URL :  Vous trouverez lâURL de la tuile dans lâonglet âExportâ.  Le modÃ¨le de leur adresse est :   http://mapwarper.net/maps/tile/4949/{z}/{x}/{y}.png  Gardez prÃ©cieusement cet URL, vous en aurez besoin. Lâoutil de crÃ©ation de tuiles de Map Warper utilise lâimage gÃ©o-rÃ©fÃ©rencÃ©e pour produire des tuiles carrÃ©es, Ã  diffÃ©rents niveaux de zoom et avec des coordonnÃ©es propres, de maniÃ¨re Ã  ne montrer que les parties utiles de votre carte interactive quand vous la consultez2.  En voici un exemple :   Les cartes en lignes sont constituÃ©es de millions de tuiles comme celle-ci.    2) Extraction des donnÃ©es  Nous avons la carte, maintenant il nous faut choisir quelles donnÃ©es y afficher. Notre exemple utilise lâannuaire de la capitale de la Colombie, Bogota, en 1888. Cet annuaire regorge dâinformations, regroupant les noms de dizaines de milliers de personnes (chacune avec son adresse et sa profession), des dizaines de mÃ©tiers (dÃ©crits en page 4) et des publicitÃ©s, listant aussi de nombreux commerces (avec leurs adresses et propriÃ©taires).   Cet annuaire nous donne un aperÃ§u intÃ©ressant de la vie en Colombie Ã  la fin du XIXe siÃ¨cle : avocats, photographes et comptables en partagent les pages avec selliers et forgerons.  Je nâai pas Ã©tÃ© trÃ¨s original, et jâai cherchÃ© des hommes politiques importants de lâÃ©poque, comme le prÃ©sident en exercice (page 222, premier nom de la seconde colonne). Il y a sept personnes sur notre liste : quatre prÃ©sidents, un vice-prÃ©sident, un ministre et un prÃ©sident par interim3. Cette liste prÃ©cise les :   nom fonction (poste le plus Ã©levÃ© occupÃ© au sein du pouvoir exÃ©cutif colombien) mandat page (dâapparition dans lâannuaire) profession (telle quâindiquÃ©e dans lâannuaire) adresse URL de la photo dans Wikimedia Commons latitude, longitude (une valeur dÃ©faut situÃ©e au centre-ville de Bogota, que nous allons modifier). TÃ©lÃ©charger la liste en format CSV  Vous pouvez bien sÃ»r crÃ©er votre propre liste avec des donnÃ©es plus intÃ©ressantes ou plus utiles pour vous. Nâoubliez pas de crÃ©er des colonnes latitude et longitude.  Sauvegardez sous forme de liste CSV (âcomma-separated valuesâ).    GeoJSON  Pour le moment, nos donnÃ©es sont contenues dans une liste CSV, mais les outils cartographiques en ligne utilisent gÃ©nÃ©ralement le format GeoJSON. GeoJSON est fondÃ© sur la norme JSON, un des formats de donnÃ©es les plus courants sur le Web. GeoJSON utilise le concept dâentitÃ©s (âfeaturesâ) pour dÃ©crire une information gÃ©ographique. Ces entitÃ©s peuvent Ãªtre des points (comme dans notre exemple) ou des Ã©lÃ©ments gÃ©omÃ©triques plus complexes comme des lignes simples ou des multilignes, des polygonesâ¦ Chaque entitÃ© est dÃ©finie par une gÃ©omÃ©trie âgeometryâ  (point, ligne, polygoneâ¦) et des propriÃ©tÃ©s âpropertiesâ liÃ©es, qui sont les donnÃ©es que vous voulez lui associer (pour nous, les nom, adresse, photoâ¦ dâun individu). Par exemple4:    Nous devons convertir notre tableau en un objet GeoJSON, puis remplacer les valeurs par dÃ©faut de latitude et longitude par les valeurs exactes, qui nous seront indiquÃ©es par la carte elle-mÃªme. Il nous faut un outil permettant de gÃ©nÃ©rer et de manipuler facilement du GeoJSON : voici donc GeoJSON.io! Il sâagit dâun âoutil rapide et simple pour crÃ©er, visualiser et partager des cartesâ. Il possÃ¨de une interface bien pratique pour crÃ©er le GeoJSON dont nous avons besoin.  Ouvrez donc GeoJSON.io dans une nouvelle fenÃªtre de votre navigateur. Vous verrez la carte par dÃ©faut, sans aucun zoom. Maintenant, bricolons un peu. Faites un clic droit nâimporte oÃ¹ sur la carte, et choisissez Examiner lâÃ©lÃ©ment (Inspect Element en anglais):  Clic droitâ Examiner lâÃ©lÃ©ment  Ceci ouvrira un affichage avancÃ© permettant de lire et de modifier le code de la page vue (ici, lâinterface cartographique). GeoJSON.io comprend une interface de programmation (API) pour contrÃ´ler la carte affichÃ©e. Le noyau du site est MapBoxJS, lui-mÃªme construit sur Leaflet, une âbibliothÃ¨que JavaScript open-source pour des cartes interactives adaptÃ©es aux mobilesâ. Je mentionne les deux, puisque, la plupart du temps, ce qui fonctionne dans lâun fonctionne dans lâautre (documentez-vous bien avant de choisir!), et jâutiliserai le terme Leaflet au lieu de  MapBoxJS.  Dans lâonglet Console vous verrez du texte et, en bas, un curseur lÃ  oÃ¹ vous pouvez exÃ©cuter du code JavaScript. Vous remarquerez Ã©galement des commentaires du crÃ©ateur de GeoJSON.io. Une ligne est prÃ©vue pour entrer du JavaScript supplÃ©mentaire, tapez-y le contenu du GIF suivant et appuyez sur EntrÃ©e :  La carte sera centrÃ©e et zoomÃ©e sur Bogota, Colombie, la zone couverte par la carte de 1891. Maintenant tapez ceci :  â¦et faites EntrÃ©e. Cela ajoutera la couche de tuiles proprement dite. Cette ligne de code comprend lâURL que vous aviez copiÃ©e Ã  lâÃ©tape 1. Le rÃ©sultat donnera quelque chose comme Ã§a :  Un petit âbricolageâ dans GeoJSON.io  Vous pouvez maintenant fermer la console de dÃ©veloppement (mais pas le navigateur!).     Note: Il faudra entrer ce code Ã  chaque fois que vous accÃ©derez Ã  GeoJSON.io, puisquâil ne sauvegarde pas les modifications faites dans la console. Vous pouvez par contre conserver les donnÃ©es que vous ajoutez Ã  la carte en vous connectant.     Ajouter des donnÃ©es dans GeoJSON.io  Nous allons maintenant utiliser cette version modifiÃ©e de la carte comme base pour gÃ©o-localiser correctement notre liste CSV des prÃ©sidents.  Faites glisser sur la carte le fichier CSV que vous avez tÃ©lÃ©chargÃ© :   La magie du glisser-dÃ©poser dans GeoJSON.io  Vous remarquerez que les donnÃ©es sont automatiquement converties en GeoJSON (Ã  droite) et que la carte zoome sur les repÃ¨res correspondant Ã  chaque prÃ©sident (Ã  gauche). Un message (sur fond vert en haut Ã  gauche) nous informe que sept entitÃ©s ont Ã©tÃ© importÃ©es.  Mais oÃ¹ est passÃ©e la carte de 1891? Pas de panique, la carte est juste Ã  un niveau de zoom trop avancÃ©, et notre jeu de tuiles ne dispose pas dâimages Ã  cette Ã©chelle. DÃ©zoomez un peu, et vous verrez rÃ©apparaitre la carte de 1891.    Localiser les points de repÃ¨re  Les points indiquÃ©s dans notre CSV sont tous localisÃ©s les uns sur les autres, sur la Plaza de BolÃ­var. Il faut les dÃ©placer sur leur emplacement correct. Si vous cliquez sur le marqueur gris, vous verrez les donnÃ©es attribuÃ©es au repÃ¨re du dessus (General Rafael Reyes). Il habitait alors au 50, Calle 16. Trouvons cette adresse sur la carte.  Il est relativement facile de trouver les adresses puisque les coins de chaque pÃ¢tÃ© de maisons indiquent les numÃ©ros des immeubles correspondants. La numÃ©rotation des âcarrerasâ (rues verticales) va du sud vers le nord, et se rÃ©partit entre pairs Ã  lâouest et impairs Ã  lâest ; alors que celle des âcallesâ (rues horizontales) va de lâest Ã  lâouest, avec les numÃ©ros pairs au nord et impairs au sud :    PlaÃ§ons-nous sur une adresse approximative, en nous repÃ©rant sur les coins de rues. Pour ce faire, ouvrez le mode Ã©dition en cliquant sur lâicÃ´ne  . Les marqueurs sont encadrÃ©s en rose, et vous pouvez les dÃ©placer. Placez-les Ã  lâendroit voulu, cliquez sur âSaveâ pour enregistrer les modifications :     Certaines adresses sont dÃ©licates Ã  placer, mais il est plaisant de pouvoir se perdre ainsi dans le Bogota de 1891.  Vous remarquerez que sur cette carte les bÃ¢timents gouvernementaux portent les couleurs du drapeau colombien. Quand on place Rafael NÃºÃ±ez Moledo, le prÃ©sident en exercice Ã  cette date, son adresse correspond Ã  un de ces bÃ¢timents, la Casa de NariÃ±o.    Sauvegarder le fichier GeoJSON  Maintenant il faut gÃ©nÃ©rer le GeoJSON final, que nous utiliserons pour crÃ©er notre carte interactive. Choisissez simplement Save > GeoJSON dans le menu. Un fichier nommÃ© map.geojson sera gÃ©nÃ©rÃ© et enregistrÃ© sur votre ordinateur. Pour tricher, vous pouvez aussi tÃ©lÃ©charger celui que jâai crÃ©Ã©â¦     3) CrÃ©er une carte personnalisÃ©e de 2014 (facultatif)  Nous voulons comparer cette carte de 1891 avec le Bogota dâaujourdâhui, afin dâÃ©tudier les changements dans le temps. Il nous faut une carte de base, qui est ce que GeoJSON offre quand vous chargez la page : une carte du monde toute simple (et exacte, espÃ©rons-le), affichant les rues actuelles. Nous pouvons utiliser les  tuiles standard dâOpenStreetMap ou un service comme MapBox  pour produire une carte complÃ©tement personnalisÃ©e (MapBox sâappuie sur les donnÃ©es dâOpenStreetMap). MapBox peut faire beaucoup de choses : il permet de changer les couleurs, de choisir ce qui est affichÃ© (rues, bÃ¢timents, parcs, etc.) et mÃªme dâavoir recours Ã  lâimagerie satellite! Je ne vais pas expliquer comment utiliser MapBox, vous pouvez vous rÃ©fÃ©rer Ã  leur excellent tutoriel.  Quand vous aurez fini, notez bien lâidentifiant de la carte (âMap IDâ), qui se prÃ©sentera sur le modÃ¨le username.k53dp4io. La page âProjectsâ de MapBox permet de voir toutes vos cartes et de copier directement les identifiants dans votre presse-papiers :       NOTE: Si vous ne voulez pas crÃ©er votre propre carte personnalisÃ©e, je donnerai plus loin un exemple de MapBox ID.     4) Assemblage final  Nous disposons maintenant de tous les Ã©lÃ©ments nÃ©cessaires Ã  lâassemblage de notre carte interactive :  des donnÃ©es gÃ©ographiques en format GeoJSON,  des tuiles pour la carte de 1891,    des tuiles ou une MapBox ID pour la carte de 2014. Nous afficherons un prototype dans JSFiddle, un outil permettant de rapidement crÃ©er et tester du code HTML, JavaScript et CSS. Familiarisez-vous avec lâinterface grÃ¢ce Ã  ce tutoriel.  JSFiddle affiche quatre volets principaux :  code HTML (en haut Ã  gauche), code CSS (en haut Ã  droite) JavaScript (en bas Ã  gauche),  et le rÃ©sultat final (en bas Ã  droite). JSFiddle se charge dâassembler les trois codes et dâen afficher le rÃ©sultat chaque fois que vous cliquez sur âRunâ (en haute, dans la barre bleue).    HTML et CSS  Dans cet exemple, les Ã©lÃ©ments HTM et CSS sont trÃ¨s simples. Nous avons uniquement besoin dâune zone rectangulaire de la page affichant la carte et ses commandes.  Il nous faut un Ã©lÃ©ment HTML lÃ  oÃ¹ sera placÃ©e la carte. Tapez ou collez ceci dans le volet HTML :    Avec ce code nous crÃ©ons un Ã©lÃ©ment div identifiÃ© comme une carte et qui, vous lâaurez compris, contiendra la carte. Il faut ensuite donner un style Ã  cet Ã©lÃ©ment : une hauteur, une largeur et, si vous voulez, une bordure ou dâautres attributs. Le style est contrÃ´lÃ© par le code CSS. Tapez ou collez ceci dans le volet CSS :    Une hauteur et une largeur de 400 pixels seront attribuÃ©es Ã  lâÃ©lÃ©ment dont lâidentifiant est map (le prÃ©fixe # signifie identifiant en CSS). Bien sÃ»r vous pouvez crÃ©er un rectangle plus grand (si votre Ã©cran peut lâafficher) et indiquer dâautres attributs entre ces accolades { } (par exemple,  background-color: #f00; pour un arriÃ¨re-plan rouge si vous souhaitez voir lâÃ©lÃ©ment sans carte), mais jâai voulu garder les choses simples.  Si vous cliquez sur âRunâ maintenant, vous ne verrez pas grand-chose (Ã  moins que vous nâayez ajoutÃ© une couleur dâarriÃ¨re-plan ou une bordure). Nous nâavons plus besoin dâHTML et de CSS pour le moment.    Ajouter MapBoxJS  Pour visualiser la carte et la rendre interactive, nous avons besoin dâÃ©lÃ©ments supplÃ©mentaires et de JavaScript. Jâai dÃ©jÃ  parlÃ© de Leaflet et de MapBoxJS: Leaflet est inclus dans MapBoxJS, donc nous nous prÃ©occuperons uniquement de ce dernier. MapBoxJS est composÃ© de deux fichiers: un fichier JS et un fichier CSS. Vous savez dÃ©jÃ  ce que fait le CSS. Le fichier JavaScript renferme tout lâinteractivitÃ© magique de notre carte. Voici les URL des fichiers en question (NB : il ne sâagit pas de la derniÃ¨re version de MapBoxJS, mais cela fonctionnera quand mÃªme) :  Fichier CSS :  http://api.tiles.mapbox.com/mapbox.js/v1.5.0/mapbox.css  Fichier JavaScript : http://api.tiles.mapbox.com/mapbox.js/v1.5.0/mapbox.js  Dans la colonne de gauche de JSFiddle, ouvrez la section âExternal Resourcesâ. Copiez ces URL et collez chacune dâelle dans la zone JavaScript/CSS URI, puis cliquez sur le bouton â+â. Vous verrez alors quelque chose comme cela :  Votre page JSFiddle aprÃ¨s lâajout des deux fichiers MapBoxJS  DÃ©sormais, JSFiddle chargera ces fichiers quand vous cliquerez sur âRunâ.   Bonjour la carte!  Et maintenant, le moment que vous attendez tous! CrÃ©ons un peu de JavaScript pour voir la carte de 1891. Ãcrivez ceci dans le volet JavaScript :    â¦et cliquez sur âRunâ. Voici ce que vous devriez voir :  Votre premiÃ¨re carte Web!  GrÃ¢ce Ã  Leaflet, crÃ©er des cartes en ligne est aussi facile que Ã§a.     Note: Je nâentre pas ici dans les dÃ©tails des API Leaflet ou MapBoxJS. Il existe des tutoriels et des exemples pour les deux. A la place, je vais vous donner des fragments de code, en expliquant briÃ¨vement ce quâils font. Vous allez copier, coller, cliquer sur âRunâ et le rÃ©sultat sera magique5. Plus tard vous dÃ©couvrirez par vous-mÃªme comment faire encore mieux.     Combiner plusieurs jeux de tuiles  Vous avez vu que la carte est vide, sauf pour la partie correspondant Ã  1891 : câest normal. LâURL de ce jeu de tuiles ne contient que la carte rectifiÃ©e, et rien dâautre. Il nous faut un jeu de tuiles supplÃ©mentaire pour comparer avec 2014 (je vais utiliser un exemple de MapBox Map ID, au cas oÃ¹ vous nâauriez pas crÃ©Ã© le vÃ´tre Ã  lâÃ©tape 3). Nous allons remplacer le code JS par un nouveau, contenant :  les informations de provenance de la carte, les tuiles pour 2014, une commande pour passer dâun jeu de tuiles Ã  lâautre. Ce code doit remplacer votre JS prÃ©cÃ©dent :    Vous remarquerez que ce code est assez similaire Ã  lâautre. Les diffÃ©rences principales sont lâattribution des donnÃ©es et les jeux de tuiles MapBox (par le biais de la Map ID). La commande elle-mÃªme consiste en deux lignes : une pour crÃ©er une variable baseMaps qui supportera les tuiles (vous pouvez ajouter autant de jeux que vous voulez) et une autre pour crÃ©er une commande de bascule et lâajouter Ã  la carte. La voici en action:  La mention de provenance de lâimage change avec le jeu de tuiles.  Nous y sommes presque! Il faut maintenant afficher nos donnÃ©es. Leaflet nous facilite le travail, puisque il est par dÃ©faut compatible avec GeoJSON. Cette Ã©tape tient en quelques lignes, mais dâabord, supprimez la fonction de zoom map.setView([4.598056, -74.075833],14). Maintenant collez ce code en bas du volet JS :    Copiez le GeoJSON depuis le fichier texte que vous avez tÃ©lÃ©chargÃ© dans GeoJSON.io et collez-le lÃ  oÃ¹ vous lisez 'paste_geojson_here_keep_quotes'. Gardez bien les guillemets! Cette ligne devrait ressembler Ã  ceci :     Nous avons remplacÃ© la fonction zoom par  map.fitBounds(geolayer.getBounds()). Cela rend la carte plus âintelligenteâ : nous ne rentrons pas manuellement longitude, latitude et niveau de zoom, nous laissons Leaflet calculer la zone occupÃ©e par lâensemble des marqueurs avec getBounds() et ajouter cette valeur Ã  la fonction fitBounds(). VoilÃ , la carte est maintenant zoomÃ©e pour montrer tous nos marqueurs. Si vous en ajoutez de nouveaux, les limites de la zone sâajusteront automatiquement!  Vous pouvez Ã©galement ajouter des points de repÃ¨res ou dâautres informations Ã  la bascule de couches. Il faut juste crÃ©er une variable comparable Ã  celle que vous avez crÃ©Ã©e pour les jeux de tuiles et mettre Ã  jour le code de crÃ©ation de commande :    Vous verrez quelque chose comme ceci en cliquant sur âRunâ :  Votre carte et ses donnÃ©es personnalisÃ©es     Note: Pensez bien Ã  dÃ©placer le code de crÃ©ation de commande L.control.layers en dessous de lâanalyse de GeoJSON. La variablegeolayer a besoin dâexister pour Ãªtre ajoutÃ©e Ã  dâautres couches (overlays). Consultez mes rÃ©sultats JSFiddle pour plus de dÃ©tails.    Une autre ligne importante est celle contenant la fonction L.geoJson(). Celle-ci analyse toutes les entitÃ©s dÃ©crites par le fichier map.geojson. Leaflet/MapBoxJS affiche par dÃ©faut des marqueurs bleus pour les entitÃ©s points, que vous pouvez personnaliser. L.geoJson() permet aussi dâajouter de lâinteractivitÃ© aux marqueurs, car pour le moment il ne se passe rien si vous cliquez dessus.    Animer les marqueurs  Nous voulons pouvoir cliquer sur nos points de repÃ¨re et afficher une fenÃªtre pop-up avec les donnÃ©es que nous leur avons associÃ©es (dans les propriÃ©tÃ©s de lâentitÃ©). Il y a deux choses Ã  faire :  crÃ©er une fonction qui crÃ©era et affichera un pop-up pour chaque entitÃ© point, et modifier lâappel L.geoJson() pour utiliser cette fonction. Câest ce que fait la fonction bindPopup() de Leaflet : afficher une boite de texte pour une couche donnÃ©e. Le texte peut Ãªtre balisÃ© en HTML. Collez ce code sous tout ce que vous avez jusquâÃ  prÃ©sent :     Cette fonction showPopup()reÃ§oit une entitÃ© (feature), lâÃ©lÃ©ment de GeoJSON qui renferme toutes nos informations (une gÃ©omÃ©trie et des propriÃ©tÃ©s), et une couche (layer), dans notre exemple, le marqueur bleu. Ces deux paramÃ¨tres sont traitÃ©s automatiquement par la fonction L.geoJson(). showPopup() extrait ensuite les propriÃ©tÃ©s de chaque entitÃ© (nom, adresse, etc.) et construit une chaÃ®ne HTML, utilisÃ©e pour crÃ©er le pop-up.   Modifiez votre ligne L.geoJsoncomme ceci pour connecter showPopup:     â¦vous ajoutez , {onEachFeature: showPopup} aprÃ¨s geodata. Ceci indique Ã  Leaflet dâappliquer la fonction showPopup Ã  chaque entitÃ© GeoJSON.     Note: Si votre GeoJSON comporte plusieurs catÃ©gories dâentitÃ©s (points, lignes, polygonesâ¦), il faut savoir que la mÃªme fonction sera appliquÃ©e Ã  toutes. Par exemple, les polygones ont des limites, mais pas les points. VÃ©rifiez si lâentitÃ© sur laquelle vous avez cliquÃ©e a bien des limites avant dâutiliser la fonctionfitBounds.   Si vous chargez la carte et cliquez sur un repÃ¨re, vous verrez quelque chose comme cela :    Câest dÃ©jÃ  trÃ¨s bien, mais ce serait encore mieux en affichant la photo, et en liant le numÃ©ro de page Ã  lâannuaire numÃ©risÃ©. Câest ce que nous allons faire. Remplacez la fonction showPopup par celle-ci :    Nous avons juste ajoutÃ© une action sous condition : si key est Ã©gal Ã  âPageâ un lien est crÃ©Ã© vers lâannuaire, et si key est Ã©gal Ã  âPhotoâ une vignette est affichÃ©e, avec une hauteur limitÃ©e Ã  150 pixels (au cas oÃ¹ lâimage serait trop grande).  Voici Ã  quoi ressemble M. NÃºÃ±ez maintenant :     â¦tout Ã  fait prÃ©sidentiel!  Et nous en avons fini!    Pour conclure  Il vous faudra compiler ces trois fragments de code dans une page HTML pour publier votre nouvelle carte quelque part. Pas dâinquiÃ©tude, voici du code avec les zones nÃ©cessaires pour y coller vos CSS, HTML et JS. Sauvegardez le tout dans un fichier .html et publiez-le :    Voici la carte finie. Jâai fait quelques petites modifications au CSS pour remplir la fenÃªtre du navigateur.  JâespÃ¨re que ce tutoriel vous aura Ã©tÃ© utile. NâhÃ©sitez pas Ã  me contacter pour tout commentaire ou question!   A comparer avec ce qui se passe lorsque lâon convertit du son depuis un CD vers un MP3.  â© Voici une introduction au fonctionnement des tuiles des cartes Web.  â© Je nâai pas fait de recherche poussÃ©e sur ces noms, donc il est possible (mais peu probable) quâil sâagisse dâhomonymes.  â©Depuis GeoJSON.org â© Si tout pouvait fonctionner comme Ã§a!  â©

When I was researching applications for displaying digitized books in a web browser for some projects at work, I remembered the rather sleak viewer that is used by the Internet Archive and its sister project, OpenLibrary. Turns out, they open sourced their code under the AGPL on GitHub. While integrating it into our applications, I struggled a bit with the official documentation.  While it outlines briefly how to use the reader with self-hosted images, it assumes that you are using the Internet Archive’s server software, which is written in PHP and pretty much specific to their own environment. To remedy that situation a bit, I’ve decided to put down what I have learned about using the BookReader with content not hosted at the Internet Archive.  In this first post I will explain how to set up the BookReader client with the example book from the official BookReader demo. I will stay closely to the official demo (as found in the BookReaderDemo directory of the official release), but provide some more information about what is going on.  Over the next posts in this series, I will explain how to implement the display of a table of contents, fulltext search and highlighting, as well as the reader’s text-to-speech function.  Setting up the reader First, download the latest release of the BookReader from its GitHub page and extract it somewhere.  Create a new folder that will hold all files for the example project and copy the BookReader folder into it. Let’s begin by writing a simple HTML page, example.html, that will hold the reader.  Internally it assumes that it is running in its own window. This is a bit unfortunate, as this makes it neccessary to display it in an <iframe> element if you want to integrate it with the rest of your site. Keeping this in mind, here’s what a minimal website that loads the BookReader code and sets up the neccesary markup looks like: <html> <head>     <title>bookreader example</title>      <link rel="stylesheet" type="text/css" href="BookReader/BookReader.css"/>     <script type="text/javascript" src="http://www.archive.org/includes/jquery-1.4.2.min.js"></script>     <script type="text/javascript" src="BookReader/jquery-ui-1.8.5.custom.min.js"></script>      <script type="text/javascript" src="BookReader/dragscrollable.js"></script>     <script type="text/javascript" src="BookReader/jquery.colorbox-min.js"></script>     <script type="text/javascript" src="BookReader/jquery.ui.ipad.js"></script>     <script type="text/javascript" src="BookReader/jquery.bt.min.js"></script>     <script type="text/javascript" src="BookReader/BookReader.js"></script> </head> <body>     <div id="BookReader"/>      <script type="text/javascript">         // TODO: We need to do some stuff here.     </script>     </body> </html>  You notice that it basically only loads some JavaScript code and houses a single <div> element. In the <script> element at the end of the page, we will need to supply some code of our own to create a BookReader object and configure it.  Upon initialization, this object will fill the <div> with the user interface and access our metadata and images.  Let’s go through each of the methods that we have to implement.   Initialization First of all, we need to create an instance of the BookReader prototype and supply it with some basic information about the book that we want to display: br = new BookReader();  // Specify the number of pages the book has br.numLeafs = 15;  // Book title and the URL used for the book title link br.bookTitle= 'BookReader Example'; br.bookUrl  = 'http://jbaiter.de';  // Specify the path where images for the UI are located br.imagesBaseURL = 'BookReader/images/';    Getting to the images Next, we have to tell our newly created BookReader object where it can locate the images for our book and give him some information about them that are required to display them. br.getPageURI = function(index, reduce, rotate) {     // Construct a string that holds the URL to the page with `index`.     var leafStr = '000';     var imgStr = (index+1).toString();     var re = new RegExp("0{"+imgStr.length+"}$");     var url = 'http://www.archive.org/download/BookReader/img/page'               + leafStr.replace(re, imgStr) + '.jpg';     return url; }   This minimal implementation basically only loads an image that contains the zero-padded page index in its filename. Notice the extra parameters reduce and rotate that are not used in this example. They hold information about the desired scale factor and rotation of the image. You could pass these to the server hosting the page images as HTTP parameters and let the server serve correctly scaled and rotated images. The BookReader also has to know the dimensions of each page: br.getPageWidth = function(index) {     return 800; } br.getPageHeight = function(index) {     return 1200; }  Here, we assume that all images have the same dimensions and only make the methods return static values. You could, however, also get that information for each individual page using the index parameter and either some JavaScript code that obtains the dimensions, or a call to a server-side API that does so for you. Last but not least, we also have to supply some information about the ordering and numbering of the pages: // Return which side, left or right, that a given page should be displayed on br.getPageSide = function(index) {     if (0 == (index & 0x1)) {         return 'R';     } else {         return 'L';     } }  // This function returns the left and right indices for the user-visible // spread that contains the given index.  The return values may be // null if there is no facing page or the index is invalid. br.getSpreadIndices = function(pindex) {     var spreadIndices = [null, null];     if ('rl' == this.pageProgression) {         // Right to Left         if (this.getPageSide(pindex) == 'R') {             spreadIndices[1] = pindex;             spreadIndices[0] = pindex + 1;         } else {             // Given index was LHS             spreadIndices[0] = pindex;             spreadIndices[1] = pindex - 1;         }     } else {         // Left to right         if (this.getPageSide(pindex) == 'L') {             spreadIndices[0] = pindex;             spreadIndices[1] = pindex + 1;         } else {             // Given index was RHS             spreadIndices[1] = pindex;             spreadIndices[0] = pindex - 1;         }     }     return spreadIndices; }  // For a given "accessible page index" return the page number in the book. // For example, index 5 might correspond to "Page 1" if there is front matter // such as a title page and table of contents. br.getPageNum = function(index) {     return index+1; }  The first method, getPageSide determines on which side to display the page with the given index. In this example, we assume that even pages are on the right, odd pages on the left. getSpreadIndices is used by the reader when it is run in two-page mode. Through it, it can get a set of two page indices for a given page index. For example, if you tell the reader to display the page with index ‘4’ in two-page mode, it will display page ‘3’ on the left and page ‘4’ on the right. This example takes into account the reading order (i.e. left to right or right to left) held in the pageProgression attribute of the BookReader object. The last method, getPageNum allows you to adjust the page number that is displayed in the reader. This can be useful if your book has missing pages, i.e. the files are numbered from 0 to 100, but actually the book used to have 120 pages, with some having been lost. Usually it is enough to switch from zero-indexed page indices to one-indexed, human readable page numbers, as in this example. You also have to provide some code to generate an embeddable URL for your book, but for the sake of brevity we omit it in this example and just stub out the method: br.getEmbedCode = function(frameWidth, frameHeight, params) { // We don't need to provide an embedded code in our minimal example. return; }  If you want to include such a link for your books, just generate a HTML snippet for an iframe with the dimensions specified by frameWidth and frameHeight, and possibly the parameters in the params object.   Launching the reader Now all that is left to do is to initialize the reader, hide some unused stuff and let it do its magic! // Start the reader br.init();  // read-aloud and search need backend compenents and are not supported in // this example. $('#BRtoolbar').find('.read').hide(); $('#textSrch').hide(); $('#btnSrch').hide();  You can find the whole example code in this Gist. 

  JSTOR has been in the news recently thanks to the Aaron Swartz hacking case. While I do not wish to discuss Swartzâs actions, his possible motivations, or open access questions here, I do find it notable that JSTOR, as the organization mentions in its statement on the matter, provides an API for access to broad swaths of its data. This fact means that coders can query the JSTOR databases in many different ways such as n-grams, time lines, graphs, full text retrieval, and citation information. Moreover, it makes me wonder what purpose that could not have been served via JSTORâs Data for Research (DfR) API that Swartz had in mind when he decided to download (via Python scripts and in the face of multiple attempts to stop him) approximately 4 million articles.   Indeed, it is a shame that few in the ensuing discussions have commented on JSTORâs DfR interface. It is an incredibly useful tool for analyzing the massive amounts of scholarly knowledge they have stored. There are limitations to what DfR provides, though. For example, while we can download text and citations, there is almost nothing in the way of markup structuring that data. The response for a citations request distinguishes each reference, when possible, but is otherwise a primarily text-based response more suitable for human than machine consumption. Despite having an API for data access, then, much of the data returned is still derived from a model in which humans are the primary consumers.    read more

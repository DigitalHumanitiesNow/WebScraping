At my last job, one of the things I did was re-form a development team; I anchored it by hiring two exceptional people I worked with before, but that left two other open positions that I advertised and successfully filled through Careers 2.0.  Here are a few things I firmly believe about hiring developers in particular, beyond the basic “can you, or have you in the past, performed the tasks that are part of this job”: it doesn’t matter where people live—but you have to know how to manage, and they have to know how to work it doesn’t matter if they can do parlor tricks and brainteasers—unless you’re hiring them to do parlor tricks and brainteasers degrees rarely matter—come on, have you looked at common core CS curriculum? you have to know who you’re looking for—not what boxes you can check off Before I go on, I also want to state that to some extent I think I’m an unusual hiring manager. I’ve been working in web development for a really long time and therefore come from the time when it was the norm for no one to have relevant university coursework, and I am naturally more interested in what people can do versus what courses they took.  Also, I spent some time as a college instructor and saw for myself what students were working through on their way to CS and MIS degrees (aside: I might be the only English instructor who helped students during her office hours in their CS and MIS classes…good times!).  I used to teach professional writing, including the crafting of application materials and portfolios, and so I’m overly interested in rhetoric of these things both from the request and submission side.  Finally, I was most recently the product owner of a product that included in it a component for receiving application materials and helping hiring committees make the best decisions, so I’ve been wired for the past several years to think about solving problems in that realm and every tool I use is food for thought.  So yes, I’m a weirdo.  On the flip side, I have a lot of information to offer at The Workplace SE.  Anyway, when I write job ads I tend to emphasize: the types of skills I’m looking for, not the number of years performing tasks x, y, or z the types of work the developer will be doing the makeup of the team the information I’d like to see in an application packet It’s difficult to fit this stuff into a standard HR system, and applications to my positions tend not to be anything that HR folks can help screen since there’s nothing specific to sort by and they don’t have the same skillset I do to know what will catch my eye (or how to see through the bullshit).  As such, hiring like this tends to be an undertaking all my own, up to the point that it’s time for the larger team to have a chat with finalists.  So, this process might not fly in many companies, but one of the benefits of working in small company and being in charge of/responsible for a lot of things meant that I could do things my way.  And yes, it was really, really tiring.  However, it was also really, really rewarding.  You see, I got to talk to people, to hear from them the things that matter to them in a job, in a team, and in a company, which was useful not only for the current goal (hiring new developers) but also the ongoing effort both in that company and elsewhere to build and maintain good working environments.  I learned about the applicants not only because of the questions I asked in the phone screen, but during my communication with them before the phone screen (I phone screened probably 20% of the applicants). The Careers 2.0 product from StackExchange, both from the applicant and employer side, helped me achieve my hiring goals better than any of the other products typically used to hire developers (that includes recruiters and other job boards).  The scary (great) thing is, I’m pretty sure SE hasn’t even begun to build out that product completely in the ways that either they already know or they think they know can obliterate the existing market offerings (hey! do you want help? CALL ME.). So, why did a job ad and candidate interactions using Careers 2.0 work for me when listings on Dice and other job boards did not? I mean, it’s not like other job boards put restrictions on what you say, so I could wax philosophical about gender balanced teams and remote work just as well there as I could at Careers 2.0.  And Careers 2.0 isn’t the only job board that allows you to communicate with candidates, either, so why did it work so much better? Community.  It might sound strange in this day and age that a non “social network” has an enormous community (and sense of community) that can be successfully leveraged to produce a rich base for employers to find candidates and candidate to find employees. But it’s true in this case, at least for software developers. There’s no following or friending or networking at StackExchange sites; there’s quality content, the people who produce it, and the community who moderates it, and reputation is earned through what you say and do and not who you know.  In other words, when I’m reviewing candidates, I value “Top 10% in Ruby” (reputation earned on StackOverflow) more than I do “10 of your connections can introduce you to someone who can introduce you to Jane”.  When a candidate takes advantage of a Careers 2.0 profile, they can include many of the things commonly found in profile-building tools like LinkedIn or the one we created at my last job: summary statement, education, job history, and so on.  But what is missing in other products is the ability to highlight directly the development that people have done (via code repositories) and the contributions that people have made within the StackExchange community and elsewhere.  (edited to add: in a comment on this post I talk about how I use SE profile information to help evaluate candidates.) Instead of shoving this information into a throwaway “Other” section, in a Careers 2.0 profile these items warrant their own highlighted section, which just happens to match exactly what I ask candidates to provide because it helps me get a sense of the person whose application I’m reviewing: open source code contributions (links to GitHub, Bitbucket, Google Code, etc) apps and other software (links to app stores or project web sites) things you’ve written (links to books, links to articles and blogs) things you’re reading or have read (links to books, links to articles and blogs) reputation on StackExchange sites (including links to questions and answers) Getting all of this information in one place through an already completed profile cuts down the time I have to spend to get to know an applicant.  You see, I want to get to know applicants, and not just scan their resume for keywords and sort by GPA or number of years with technology x or whatever.  But who has time to get to know everyone? I did, with Careers 2.0., as the candidate profiles allowed me to take in a great deal of information and jump right to asking detailed questions (“Based on this question you asked on SO, I see that you’ve encountered this specific problem before. Can you describe  how it came up and the resolution process you went through?” vs a generic “Talk about a time something failed.”) Back to the list of things I mentioned at the beginning of this post, about things I believe when hiring developers…the other aspect of the SE community and the people who create Careers 2.0 profiles is that in my experience these folks already tend to be oriented toward the same things. Remote work. Results and experience over degrees and certification. Reputation based on what you’ve done and not who you know.  The Joel Test (including being able to talk about which parts are more or less important than other parts).   With Careers 2.0, the percentage of junk applications I received (people who didn’t remotely match the position or didn’t include requested information in a cover letter) was 4%.  I ran the exact same ad on a few other job boards, including Dice, and the percentage of junk applications was 95%+.  Guess which signal-to-noise ratio makes for a better hiring process, and guess where the two developers we hired came from?  These are not hard questions to answer—even the most pointy-haired boss should be able to do it! I realize many things that are important to me in a hiring process are not important to other people, or their organizations aren’t structured to support an influx of rich application material from the outset, but if the things I’ve discussed here are in any way important to you when hiring developers then do take a look at Careers 2.0 when making your next developer hire. (+1 Would use again!)

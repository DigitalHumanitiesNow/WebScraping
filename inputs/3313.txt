(part 1 of a series)I've been a digital humanities developer, that is, someone who writes code, does interface and system design, and rescues data from archaic formats in support of DH projects in a few contexts during the course of my career.  I'll be writing a piece for Bethany Nowviskie's #alt-ac (http://nowviskie.org/2010/alt-ac/) volume this year.  This is (mostly) not that piece, though portions of it may appear there, so it's maybe part of a draft.  This is an attempt to dredge up bits of my perspective as someone who has had an alternate-academic career (on and off) for the last decade.  It's fairly narrowly aimed at people like me, who've done advanced graduate work in the Humanities, have an interest in Digital Humanities, and who have or are thinking about jobs that employ their technical skills instead of pursuing a traditional academic career.A couple of future installments I have in mind are "What Skills Does a DH Developer Need?" and "What's Up with Digital Classics?"In this installment, I'm going to talk about some of the environments I've worked in.  I'm not going to pull punches, and this might get me into trouble, but I think that if there is to be a future for people like me, these things deserve an airing.  If your institution is more enlightened than what I describe, please accept my congratulations and don't take offense.Working for LibrariesIn general, libraries are a really good place to work as a programmer, especially doing DH projects.  I've spent the last three years working in digital library programming groups.  There are some downsides to be aware of:  Libraries are very hierarchical organizations, and if you are not a librarian then you are probably in a lower "caste".  You will likely not get consistent (or perhaps any) support for professional development, conference attendance, etc.  Librarians, as faculty, have professional development requirements as part of their jobs.  You, whose professional development is not mandated by the organization (merely something you have to do if you want to stay current and advance your career), will not get the same level of support and probably won't get any credit for publishing articles, giving papers, etc.  This is infuriating, and in my opinion self-defeating on the part of the institution, but it is an unfortunate fact.  [Note: Bethany Nowviskie informs me that this is not the case at UVA, where librarians and staff are funded at the same level for professional development.  I hope that signals a trend.  And by the way, I do realize I'm being inflammatory, talking of castes.  This should make you uncomfortable.]Another downside is that as a member of a lower caste, you may not be able to initiate projects on your own.  At many insitutions, only faculty (including librarians) and higher level administrators can make grant proposals, so if you come up with a grant-worthy project idea, someone will have to front for you (and get the credit).  There do exist librarian/developer jobs, and this would be a substantially better situation from a professional standpoint, but since librarian jobs typically require a Master's degree in Library and/or Information Science, libraries may make the calculation that they would be excluding perfectly good programmers from the job pool by putting that sort of requirement in.  These are not terribly onerous programs on the whole, should you want to get an MLIS degree, but it does mean obtaining another credential.  For what it's worth, I have one, but have never held a librarian position. It's not all bad though: you will typically have a lot of freedom, loose deadlines, shorter than average work-weeks, and the opportunity to apply your skills to really interesting and hard problems.  If you want to continue to pursue your academic interests however, you'll be doing it as a hobby.  They don't want your research agenda unless you're a librarian.  In a lot of ways, being a DH developer in a library is a DH developer's nirvana.  I rant because it's so close to ideal. Working for a .edu IT OrganizationMy first full time, permanent position post-Ph.D. was working for an IT organization that supports the College of Arts and Sciences at UNC Chapel Hill.  I was one of a handful of programmers who did various kinds of administrative and faculty project support.  It was a really good environment to work in.  I got to try out new technologies, learned Java, really understood XSLT for the first time, got good at web development and had a lot of fun.  I also learned to fear unfunded mandates, that projects without institutional support are doomed, and that if you're the last line of support for a web application, you'd better get good at making it scale.IT organizations typically pay a bit better than, say, libraries and since it's an IT organization they actually understand technology and what it takes to build systems.  There's less sense of being the odd man out in the organization.  That said, if you're the academic/DH applications developer it's really easy to get overextended, and I did a bad job of avoiding that fate, "learning by suffering" as Aeschylus said.Working in IndustryWorking outside academia as a developer is a whole other world.  Again, DH work is likely to have to be a hobby, but depending on where you work, it may be a relevant hobby.  You will be paid (much) more, will probably have a budget for professional development, and may be able to use it for things such as attending DH conferences.  Downsides are that you'll probably work longer hours and you'll have less freedom to choose what you do and how you do it, because you're working for an organization that has to make money.  The capitalist imperative may strike you as distasteful if you've spent years in academia, but in fact it can be a wonderful feedback mechanism.  Doing things the right way (in general) makes the organization money, and doing them wrong (again, in general) doesn't.  It can make decision-making wonderfully straightforward.  Companies, particularly small ones, can make decisions with a speed that seems bewilderingly quick when compared to libraries, which thrive on committees and meetings and change direction with all the flexibility of a supertanker.Another advantage of working in industry is that you are more likely to be part of a team working on the same stuff as you.  In DH we tend to only be able to assign one or two developers to a job.  You will likely be the lone wolf on a project at some point in your career.  Companies have money, and they want to get stuff done, so they hire teams of developers.  Being on a team like this is nice, and I often miss it.There are lots of companies that work in areas you may be interested in as someone with a DH background, including the semantic web, text mining, linked data, and digital publishing.  In my opinion, working on DH projects is great preparation for a career outside academia.FundingAs a DH developer, you will more likely than not end up working on grant-funded projects, where your salary is paid with "soft money".  What this means in practical terms is that your funding will expire at a certain date.  This can be good.  It's not uncommon for programmers to change jobs every couple of years anyway, so a time-limited position gives you a free pass at job-switching without being accused of job-hopping.  If you work for an organization that's good at attracting funding, then it's quite possible to string projects together and/or combine them.  Though there can be institutional impedance mismatch problems here, in that it might be hard to renew a time-limited position, or to convert it to a permanent job without re-opening it for new applicants, or to fill in the gaps between funding cycles.  So some institutions have a hard time mapping funding streams onto people efficiently.  These aren't too hard to spot because they go though "boom and bust" cycles, staffing up to meet demand and then losing everybody when the funding is gone.  This doesn't mean "don't apply for this job," just do it with your eyes open.  Don't go in with the expectation (or even much hope) that it will turn into a permanent position.  Learn what you can and move on.  The upside is that these are often great learning opportunities.In sum, being a DH developer is very rewarding.  But I'm not sure it's a stable career path in most cases, which is a shame for DH as a "discipline" if nothing else.  It would be nice if there were more senior positions for DH "makers" as well as "thinkers" (not that those categories are mutually exclusive).  I suspect that the institutions that have figured this out will win the lion's share of DH funding in the future, because their brain trusts will just get better and better.  The ideal situation (and what you should look for when you're looking to settle down) is a placethat has a good track record of getting funded,where developers are first-class members of the organization (i.e. have "researcher" or similar status),where there's a team in place and it's not just you, andwhere there's some evidence of long-range planning.For the most part, though, DH development may be the kind of thing you do for a few years while you're young before you go and do something else.  I often wonder whether my DH developer expiration date is approaching.  Grant funding often won't pay enough for an experienced programmer, unless those who wrote the budget knew what they were doing [Note: I've read too many grant proposals where the developer salary is < $50K (entry-level) but they have the title "Lead Developer" vel sim.â for what it's worth, this positively screams "We don't know what we're doing!"].  It may soon be time to go back to working for lots more money in industry; or to try to get another administrative DH job.  For now, I still have about a year's worth of grant funding left.  Better get back to work. 

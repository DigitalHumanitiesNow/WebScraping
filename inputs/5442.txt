From time to time, I hear an argument that goes something like this: "Our users won't deal with angle brackets, therefore we can't use TEI, or if we do, it has to be hidden from them." It's an assumption I've encountered again quite recently.  Since it's such a common trope, I wonder how true it is.  Of course, I can't speak for anyone's user communities other than the ones I serve.  And mine are perhaps not the usual run of scholars.  But they haven't tended to throw their hands up in horror at the sight of angle brackets.  Indeed, some of them have become quite expert at editing documents in TEI.The problems with TEI (and XML in general) are manifold, but its shortcomings often center around its not being expressive *enough* to easily deal with certain classes of problem.  And the TEI evolves.  You can get involved and change it for the better.  The IWNNETAAB objection seems grounded in fear.  But fear of what?  As I mentioned at the start, IWNNETAAB isn't usually an expression of personal revulsion, it's not just Luddism, it's IWNNETAAB by proxy: my users/clients/stakeholders won't stand for it.  Or they'll mess it up.  TEI is hard.  It has *hundreds* of elements.  How can they/why should they learn something so complex just to be able to digitize texts?!  What we want to do is simple, can't we have something simple that produces TEI in the end?The problem with simplified editing interfaces is easy to understand: they are simple. Complexities have been removed, and along with them, the ability to express complex things.  To put it another way, if you aren't dealing with the tags, you're dealing with something in which a bunch of decisions have already been made for you.  My argument in the recent discussion was that in fact, these decisions tend to be extremely project-specific.  You can't set it up once and expect it to work again in different circumstances; you (or someone) will have to do it over and over again.  So, for a single project, the cost/benefit equation may look like it leans toward the "simpler" option.  But taken over many projects, you're looking either at learning a reasonably complex thing or building a long series of tools that each produce a different version of that thing.  Seen in this light, I think learning TEI makes a lot of sense.  On the learning TEI side, the costs go down over time, on the GUI interface side, they keep going up.Moreover, knowing TEI means that you (or your stakeholders) aren't shackled to an interface that imposes decisions that were made before you ever looked at the text you're encoding, instead, you are actually engaging with the text, in the form in which it will be used.  You're seeing behind the curtain.  I can't really fathom why that would be a bad thing.(Inspiration for the title comes from a book my 2-year-old is very fond of)
